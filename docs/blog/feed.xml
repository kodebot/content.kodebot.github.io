<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Kodebot</title>
    <link>https://kodebot.com/blog/</link>
    <description>Recent content in Blog on Kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sun, 04 Oct 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://kodebot.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NodeJs: Loops, Closure and Async Invocation</title>
      <link>https://kodebot.com/blog/2015/nodejs-loops/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/nodejs-loops/</guid>
      <description>Closure Closure is something that is very familiar to all C# developers who know lambda expressions/functions but they just may not know that it is called Closure in JavaScript.
Lets look at what is closure in JavaScript without further ado with an example:
function outer(){ var inOuter = &amp;#34;outer&amp;#34;; inner(); function inner(){ console.log(inOuter); // prints &amp;#39;outer&amp;#39; 	} } In this example, the variable inOuter is defined in the function outer but it is used in the function inner.</description>
    </item>
    
    <item>
      <title>Exception Handling in NodeJS</title>
      <link>https://kodebot.com/blog/2015/exception-handling-in-nodejs/</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/exception-handling-in-nodejs/</guid>
      <description>Introduction Exception handling in Node might look completely different for developers coming from C# background like myself. It is mainly because of the way Node works. Node uses single thread based event loop to enable concurrency, this results in higher throughput with relatively low overhead. When it comes to exception handling, having some understanding of the event loop will help you to do the right thing.
Event Loop Node has the following three main components to achieve concurrent, non-blocking execution</description>
    </item>
    
    <item>
      <title>Unit Testing Entity Framework async Queries</title>
      <link>https://kodebot.com/blog/2015/unit-testing-entity-framework-async-queries/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/unit-testing-entity-framework-async-queries/</guid>
      <description>Introduction In my last article, we have seen how to unit test Entity Framework queries. Now, let&amp;rsquo;s look at how to unit test async queries. When using async tasks, if we don&amp;rsquo;t use it all the way then we are not using async tasks properly. For example, if you have async action method in your controller which queries database synchronously to send some data to the requester, then we are NOT using async properly as the thread is blocked during database operation.</description>
    </item>
    
    <item>
      <title>Unit Testing Entity Framework Queries</title>
      <link>https://kodebot.com/blog/2015/unit-testing-entity-framework-queries/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/unit-testing-entity-framework-queries/</guid>
      <description>Introduction When writing unit tests, we should test only one thing at once and isolate the system under test(SUT) from all the dependencies. We should follow the same approach for any LINQ queries you write to retrieve data from the underlying Database. But, I have seen many developers excluding the whole data access layer from unit testing. This is not right approach to follow IMHO. Many developers don&amp;rsquo;t bother unit testing data access layer because of the perceived effort and complexity involved in isolating the data access layer from underlying Database and ORM tools like Entity Framework.</description>
    </item>
    
    <item>
      <title>VS-TAC - Cordova version</title>
      <link>https://kodebot.com/blog/2015/vs-tac-cordova-version/</link>
      <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/vs-tac-cordova-version/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>ASP.NET MVC 5 - JsonResult with Http Status Code 400</title>
      <link>https://kodebot.com/blog/2015/aspnet-mvc-5-jsonresult-with-http-status-code-400/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/aspnet-mvc-5-jsonresult-with-http-status-code-400/</guid>
      <description>ASP.NET Web API 2 introduced several helper methods like Ok, NotFound, BadRequest, etcâ€¦ . This allows us to write code which makes its intentions clear.
In recent times, I have been working in semi-single page application which uses ASP.NET MVC 5 and AngularJS. The application is designed in a way that, there is only one view per feature and each view is SPA. So, each ASP.NET MVC controller have only one GET action that returns the view and rest of the communication is using actions that returns JsonResult that can be used by client in AJAX style just like consuming Web API.</description>
    </item>
    
    <item>
      <title>AngularJS 1.x - Validation on File Input type</title>
      <link>https://kodebot.com/blog/2015/angularjs-1x-validation-on-file-input-type/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/angularjs-1x-validation-on-file-input-type/</guid>
      <description>&amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;col-md-2 control-label&amp;#34; for=&amp;#34;photoUrl&amp;#34;&amp;gt;Photo&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;col-md-4&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;input-group&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;btn btn-primary btn-file input-group-addon&amp;#34;&amp;gt; Browse &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;photoUrlSelector&amp;#34; name=&amp;#34;photoUrlSelector&amp;#34; accept=&amp;#34;image/*&amp;#34; &amp;gt; &amp;lt;/span&amp;gt; &amp;lt;input class=&amp;#34;form-control&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;photoUrl&amp;#34; name=&amp;#34;photoUrl&amp;#34; data-ng-disabled=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;span class=&amp;#34;btn btn-primary btn-file input-group-addon&amp;#34;&amp;gt; Browse &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;photoUrlSelector&amp;#34; name=&amp;#34;photoUrlSelector&amp;#34; accept=&amp;#34;image/*&amp;#34;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;btn btn-primary btn-file input-group-addon&amp;quot;&amp;gt;Browse &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;photoUrlSelector&amp;quot; name=&amp;quot;photoUrlSelector&amp;quot; ngf-select ng-model=&amp;quot;vm.author.photoUrl&amp;quot; accept=&amp;quot;image/*&amp;quot; data-ng-click=&amp;quot;addAuthorForm.photoUrl.$touched=true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;input class=&amp;#34;form-control&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;photoUrl&amp;#34; name=&amp;#34;photoUrl&amp;#34; data-ng-model=&amp;#34;vm.author.photoUrl[0].name&amp;#34; data-ng-required=&amp;#34;true&amp;#34; data-ng-disabled=&amp;#34;true&amp;#34;&amp;gt; as you can see, the input field is also decorated with ng-required directive to enforce required field validation.</description>
    </item>
    
    <item>
      <title>Angular 1.x - Unit Testing a function that returns Promise</title>
      <link>https://kodebot.com/blog/2015/angular-1x-unit-testing-a-function-that-returns-promise/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/angular-1x-unit-testing-a-function-that-returns-promise/</guid>
      <description>var app = angular.module(&amp;#34;app&amp;#34;); app.controller(&amp;#34;studentController&amp;#34;, function($q, studentDataService){ var vm = this; vm.students = undefined; activate(); function activate (){ vm.students = getAllStudents(); } function getAllStudents(){ return studentDataService .getAll(); } }); it(&amp;#34;should get students on activation&amp;#34;, function(done){ // Fixture Setup  // Exercise Systcode  var sut = $controller(&amp;#34;studentController&amp;#34;); // Verify Outcome  sut.students.then(function(data){ expect(data).toBeDefined(); done(); }); $rootScope.$apply(); // Fixture Teardown }); </description>
    </item>
    
    <item>
      <title>TypeScript - Accessing object with null key</title>
      <link>https://kodebot.com/blog/2015/typescript-accessing-object-with-null-key/</link>
      <pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-accessing-object-with-null-key/</guid>
      <description>var car = { wheels : 3, colour: &amp;#39;red&amp;#39;, drive: function(){ ... } } routes[null].redirectTo An index expression argument must be of type string, number, symbol, or any.
var nullRef: any = null; routes[nullRef].redirectTo </description>
    </item>
    
    <item>
      <title>ASP.NET MVC 5 Hosting for Integration / E2E Testing</title>
      <link>https://kodebot.com/blog/2015/aspnet-mvc-5-hosting-for-integration-e2e-testing/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/aspnet-mvc-5-hosting-for-integration-e2e-testing/</guid>
      <description>public static class ApplicationUtilities { private static Process _webHostProcess; private const string WEB_APP_NAME = &amp;#34;BookShop.Web&amp;#34;; private const int WEB_APP_PORT = 12345; public static void StartApplication() { var webHostStartInfo = GetProcessStartInfo(); _webHostProcess = Process.Start(webHostStartInfo); _webHostProcess.TieLifecycleToParentProcess(); } public static void StopApplication() { if (_webHostProcess == null) return; if (!_webHostProcess.HasExited) _webHostProcess.Kill(); _webHostProcess.Dispose(); } public static string ApplicationBaseUrl { get { return string.Format(&amp;#34;http://localhost:{0}&amp;#34;, WEB_APP_PORT); } } public static string GetFullUrl(string relativePath) { return string.Format(&amp;#34;{0}{1}&amp;#34;, ApplicationUtilities.</description>
    </item>
    
    <item>
      <title>How to isolate AutoMapper in Unit Tests?</title>
      <link>https://kodebot.com/blog/2015/how-to-mock-automapper-in-unit-tests/</link>
      <pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/how-to-mock-automapper-in-unit-tests/</guid>
      <description>kernel.Bind&amp;lt;IMappingEngine&amp;gt;().ToConstant(Mapper.Engine); services.AddInstance&amp;lt;IMappingEngine&amp;gt;(Mapper.Engine); var mockMapper = new Mock&amp;lt;IMappingEngine&amp;gt;(); mockMapper.Setup(mock =&amp;gt; mock.Map&amp;lt;TargetType&amp;gt;(It.IsAny&amp;lt;SourceType&amp;gt;())).Returns(targetInstance); public class User { public int Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } } public class UserDto { public int Id { get; set; } public string FirstName { get; set; } } public class Sut { private readonly IMappingEngine _mapper; public Sut(IMappingEngine mapper) { _mapper = mapper; } public User Run(UserDto dto) { return _mapper.</description>
    </item>
    
    <item>
      <title>ASP.NET 5 - Tag Helpers, the HTML way</title>
      <link>https://kodebot.com/blog/2015/asp-net-5-tag-helpers-the-html-way/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/asp-net-5-tag-helpers-the-html-way/</guid>
      <description>// Old style tag helpers @Html.LabelFor(Model =&amp;gt; Model.Name, &amp;#34;User Name&amp;#34;, new { @class = &amp;#34;control-label&amp;#34; }); // Declarative style &amp;lt;label asp-for=&amp;#34;Name&amp;#34; class=&amp;#34;control-label&amp;#34;&amp;gt;User Name&amp;lt;/label&amp;gt; // add tag helpers @addTagHelper &amp;#34;*, Microsoft.AspNet.Mvc.TagHelpers&amp;#34; // ITagHelper int Order { get; } Task ProcessAsync(TagHelperContext context, TagHelperOutput output); // Custom tag helper example [TargetElement(&amp;#34;div&amp;#34;, Attributes = &amp;#34;panel-title&amp;#34;)] [TargetElement(&amp;#34;div&amp;#34;, Attributes = &amp;#34;panel-style&amp;#34;)] public class PanelTagHelper : TagHelper { [HtmlAttributeName(&amp;#34;panel-title&amp;#34;)] public string Title { get; set; } [HtmlAttributeName(&amp;#34;panel-type&amp;#34;)] public HtmlPanelType PanelType { get; set; } public override void Process(TagHelperContext context, TagHelperOutput output) { //&amp;lt;div class=&amp;#34;panel panel-default&amp;#34;&amp;gt;  // &amp;lt;div class=&amp;#34;panel-heading&amp;#34;&amp;gt;  // &amp;lt;h3 class=&amp;#34;panel-title&amp;#34;&amp;gt;Panel title&amp;lt;/h3&amp;gt;  // &amp;lt;/div&amp;gt;  // &amp;lt;div class=&amp;#34;panel-body&amp;#34;&amp;gt;  // Panel content  // &amp;lt;/div&amp;gt;  //&amp;lt;/div&amp;gt;  // header content  var panelHeadingContent = new TagBuilder(&amp;#34;h3&amp;#34;); panelHeadingContent.</description>
    </item>
    
    <item>
      <title>ASP.NET 5 - Environment specific pipeline configuration</title>
      <link>https://kodebot.com/blog/2015/asp-net-5-environment-specific-pipeline-configuration/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/asp-net-5-environment-specific-pipeline-configuration/</guid>
      <description>// Example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.IsEnvironment(&amp;#34;Production&amp;#34;)) { // read prod config  } else { // read dev config  } } . . . } // Full example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.</description>
    </item>
    
    <item>
      <title>Owin - Katana core middleware patterns</title>
      <link>https://kodebot.com/blog/2015/owin-katana-core-middleware-patterns/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/owin-katana-core-middleware-patterns/</guid>
      <description>// Delegate Pattern Func&amp;lt;AppFunc, AppFunc&amp;gt; where AppFunc is Func&amp;lt;IDictionary&amp;lt;string, object&amp;gt;, Task&amp;gt;&amp;gt;
// Delegate Pattern Implementation public void Configuration(IAppBuilder builder) { builder.Use(new Func&amp;lt;AppFunc, AppFunc&amp;gt;(next =&amp;gt; async env =&amp;gt; { Console.WriteLine(&amp;#34;From Delegate Middleware - Start&amp;#34;); await next(env); Console.WriteLine(&amp;#34;From Delegate Middleware - End&amp;#34;); })); } // Delegate Pattern with additional parameters public void Configuration(IAppBuilder builder) { builder.Use(new Func&amp;lt;AppFunc, string, AppFunc&amp;gt;((next, param) =&amp;gt; async (env) =&amp;gt; { Console.WriteLine(&amp;#34;From Delegate Middleware with param- Start&amp;#34;); Console.WriteLine(&amp;#34;Paramater value : {0}&amp;#34;, param); await next(env); Console.</description>
    </item>
    
    <item>
      <title>TypeScript - &#39;this&#39; reference in AngularJS event handler</title>
      <link>https://kodebot.com/blog/2015/typescript-this-reference-in-angularjs-event-handler/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-this-reference-in-angularjs-event-handler/</guid>
      <description>// Controller using class module App.Home { interface IHomeViewModel { title: string; } class HomeController implements IHomeViewModel { title: string = &amp;#34;Welcome!!!&amp;#34;; static $inject = [&amp;#34;$location&amp;#34;, &amp;#34;$rootScope&amp;#34;] constructor( private $location: ng.ILocationService, private $rootScope: ng.IRootScopeService) { } } angular.module(&amp;#34;app&amp;#34;) .controller(&amp;#34;homeController&amp;#34;, HomeController); } In this example, an interface called IHomeViewModel is created to represent the public members of the controller and a class HomeController is created which implements the interface.Dependencies are injected using static $inject member and injected dependencies are declared as private members.</description>
    </item>
    
    <item>
      <title>TypeScript build automation in ASP.NET 5 (MVC6) using Gulp</title>
      <link>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</guid>
      <description># creates package.json npm init # install packages npm install gulp gulp-typescript gulp-tslint gulp-tslint-stylish gulp-sourcemaps gulp-inject gulp-rimraf --save-dev // Package imports var gulp = require(&amp;#39;gulp&amp;#39;); var typescript = require(&amp;#39;gulp-typescript&amp;#39;); var tslint = require(&amp;#39;gulp-tslint&amp;#39;); var tslintStyle = require(&amp;#39;gulp-tslint-stylish&amp;#39;); var sourcemaps = require(&amp;#39;gulp-sourcemaps&amp;#39;); var inject = require(&amp;#39;gulp-inject&amp;#39;); var rimraf = require(&amp;#39;gulp-rimraf&amp;#39;); // clean gulp.task(&amp;#39;clean&amp;#39;, function () { gulp.src(&amp;#39;wwwroot/js/app&amp;#39;, { read: false }) .pipe(rimraf()) }); // TS Lint var tsLintConfig = require(&amp;#39;./tslintConfig&amp;#39;); gulp.task(&amp;#39;ts-lint&amp;#39;, function () { gulp.</description>
    </item>
    
    <item>
      <title>MVC 6 Camel Case JSON</title>
      <link>https://kodebot.com/blog/2015/mvc-6-camel-case-json/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/mvc-6-camel-case-json/</guid>
      <description>This means, if you have an application which uses both MVC controllers and Web API controllers then you need to apply any custom JSON serialization configurations twice or youÂ shouldÂ replace JavaScriptSerializer with JSON.NET.
// Sample  public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddMvc() .Configure&amp;lt;MvcOptions&amp;gt;(options =&amp;gt; { var jsonOutputFormatter = new JsonOutputFormatter(); jsonOutputFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); options.OutputFormatters.Insert(0, jsonOutputFormatter); }); } public void Configure(IApplicationBuilder app) { app.UseMvc(); } } </description>
    </item>
    
    <item>
      <title>TPL Task and Windows Identity Impersonation - The beauty of Closure</title>
      <link>https://kodebot.com/blog/2015/tpl-task-and-windows-identity-impersonation-the-beauty-of-closure/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/tpl-task-and-windows-identity-impersonation-the-beauty-of-closure/</guid>
      <description>// naive task code  Task.Run(() =&amp;gt; { // Task code here }); To make this work, I need to invoke the method in the task under impersonated context. The easiest way is to capture the WindowsIdentity and make it available to the task function so it can execute any code under the impersonatedÂ context.
// Task using closure var currentWindowsIdentity = WindowsIdentity.GetCurrent(); Task.Run(() =&amp;gt; { using (currentWindowsIdentity.Impersonate()) { // Task code here  } }); </description>
    </item>
    
    <item>
      <title>Selenium and Page Objects</title>
      <link>https://kodebot.com/blog/2015/selenium-and-page-objects/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/selenium-and-page-objects/</guid>
      <description>// Search Page 	public class BingSearch { private IWebElement _searchTerm; private List&amp;lt;BingSearchResult&amp;gt; _searchResults; public BingSearch() { Browser.GoTo(&amp;#34;http://www.bing.com&amp;#34;); } public string SearchTerm { get { return _searchTerm.Text; } set { _searchTerm = _searchTerm ?? Browser.WebDriver.FindElement(By.Name(&amp;#34;q&amp;#34;)); _searchTerm.SendKeys(value); } } public void Search() { if (_searchTerm != null) { if (_searchResults != null) { _searchResults.Clear(); } _searchTerm.Submit(); } } public List&amp;lt;BingSearchResult&amp;gt; SearchResults { get { _searchResults = _searchResults ?? new List&amp;lt;BingSearchResult&amp;gt;(); if (!</description>
    </item>
    
    <item>
      <title>ECMAScript 6 - Sublime Text editor build system</title>
      <link>https://kodebot.com/blog/2015/ecmascript-6-sublime-text-editor-build-system/</link>
      <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/ecmascript-6-sublime-text-editor-build-system/</guid>
      <description>// gulpfile.js var gulp = require(&amp;#39;gulp&amp;#39;); var babel = require(&amp;#39;gulp-babel&amp;#39;); var shell = require(&amp;#39;gulp-shell&amp;#39;); gulp.task(&amp;#39;run&amp;#39;, function(){ return gulp.src(&amp;#39;app.js&amp;#39;) .pipe(babel()) .pipe(gulp.dest(&amp;#39;result&amp;#39;)) .pipe(shell([&amp;#39;node result\\app.js&amp;#39;])); }); { &amp;#34;cmd&amp;#34;: [&amp;#34;gulp.cmd&amp;#34;, &amp;#34;run&amp;#34;] } This setup is only recommended if you just want to play with ES6 like me. The grunt task uses hard coded files names and you need to use the same file name to get it working.
</description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 3</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-3/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-3/</guid>
      <description>// sample 1 app.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { getAllMovies: getAllMovies } function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 2  app.config(function($provide) { $provide.decorator(&amp;#39;movieService&amp;#39;, movieServiceDecorator); function movieServiceDecorator($delegate) { var originalGetAllMovies = $delegate.getAllMovies; $delegate.getAllMovies = function() { var result = originalGetAllMovies(); return result.slice(0,2); } return $delegate; } }); </description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 2</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-2/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-2/</guid>
      <description>// sample 1 $provide.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 2 var app = angular.module(&amp;#39;app&amp;#39;); app.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 3  app.service(&amp;#39;movieService&amp;#39;, movieService); function movieService() { this.getAllMovies = getAllMovies; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 4  app.</description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 1</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-1/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-1/</guid>
      <description>// provider sample 1  $provide.provider(&amp;#39;movieService&amp;#39;, movieServiceProvider); // provider  function movieServiceProvider() { var self = this; this.$get = movieService; // factory  this.isFrench = false; function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { if (self.isFrench) { return [&amp;#39;frenchMovie1&amp;#39;, &amp;#39;frenchMovie2&amp;#39;, &amp;#39;frenchMovie3&amp;#39;]; } else { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } } } // provider sample 2  var app = angular.module(&amp;#39;app&amp;#39;, []); app.config(function($provide) { // creates and register&amp;#39;s provider  var movieServiceProviderInstance = $provide.</description>
    </item>
    
    <item>
      <title>NSequenceComparer to compare two sequences</title>
      <link>https://kodebot.com/blog/2015/nsequencecomparer-to-compare-two-sequences/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/nsequencecomparer-to-compare-two-sequences/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mocking function that returns promise</title>
      <link>https://kodebot.com/blog/2015/mocking-function-that-returns-promise/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/mocking-function-that-returns-promise/</guid>
      <description>// homeController (function () { &amp;#39;use strict&amp;#39;; angular .module(&amp;#39;app&amp;#39;) .controller(&amp;#39;homeController&amp;#39;, [&amp;#39;restaurantService&amp;#39;, homeController]); function homeController(restaurantService) { // #region viewmodel  var vm = this; vm.restaurants = []; // #endregion  // #region activate  activate(); function activate() { getRestaurants(); } // #endregion  // #region internal methods  function getRestaurants() { restaurantService.getRestaurants() .then(function (data) { vm.restaurants = data; }) .catch(function (error) { // error  }); } // #endregion  } })(); // unit test describe(&amp;#39;home page&amp;#39;, function () { var $controller; var $q; var restaurantService; beforeEach(function () { // load module  module(&amp;#39;app&amp;#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.</description>
    </item>
    
    <item>
      <title>Strucuring unit tests</title>
      <link>https://kodebot.com/blog/2015/structuring-unit-tests/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/structuring-unit-tests/</guid>
      <description>public class AddressValidator { public bool IsValid(IList&amp;lt;string&amp;gt; addressLines) { if (addressLines == null) { throw new ArgumentNullException(&amp;#34;addressLines&amp;#34;, &amp;#34;AddressLines cannot be null&amp;#34;); } if (addressLines.ElementAtOrDefault(0) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(4) != null) { return true; } if (addressLines.ElementAtOrDefault(0) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(1) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(2) != null) { return true; } return false; } public bool IsNonUkAddress(IEnumerable&amp;lt;string&amp;gt; addressLines) { // return true for UK address  return false; } } [TestClass] public class AddressVaidatorTests { private AddressValidator _target; [TestInitialize] public virtual void TestSetup() { _target = new AddressValidator(); // other test setups that are common for all the tests in this file.</description>
    </item>
    
    <item>
      <title>Decorator over Inheritance hierarchy</title>
      <link>https://kodebot.com/blog/2015/decorator-over-inheritance-hierarchy/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/decorator-over-inheritance-hierarchy/</guid>
      <description>public class Command : ICommand { public bool CanExecute(object parameter) { // normal can execute version  return true; } public event EventHandler CanExecuteChanged; public void Execute(object parameter) { // normal execute version  } } public class AuditedCommand:Command { public bool CanExecute(object parameter) { // audited can execute version  return base.CanExecute(parameter); } public void Execute(object parameter) { // audited execute version  base.Execute(parameter); } } public class SecureCommand : Command { public bool CanExecute(object parameter) { // Secure can execute version  return base.</description>
    </item>
    
    <item>
      <title>Organize AngularJS Tests within a test file</title>
      <link>https://kodebot.com/blog/2015/organize-angularjs-tests-within-a-spec/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/organize-angularjs-tests-within-a-spec/</guid>
      <description>var $controller; var calculatorService; beforeEach(function () { // load module  module(&amp;#39;app&amp;#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.value(&amp;#39;service&amp;#39;, &amp;#39;override&amp;#39;);  }); // initialise  inject(function(_$controller_, _calculatorService_) { $controller = _$controller_; calculatorService = _calculatorService_; }); }); it(&amp;#39;should initialise the controller successfully&amp;#39;, function() { // act  var result = $controller(&amp;#39;homeController&amp;#39;); // assert  expect(result).toBeDefined(); }); describe(&amp;#39;when add is performed&amp;#39;, function() { it(&amp;#39;should invoke add in calculatorService&amp;#39;, function() { // arrange  // replace original method with spy  calculatorService.</description>
    </item>
    
    <item>
      <title>Setup Chutzpah to Run Javascript Tests in VisualStudio</title>
      <link>https://kodebot.com/blog/2015/setup-chutzpah-to-run-javascript-tests-in-visualstudio/</link>
      <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/setup-chutzpah-to-run-javascript-tests-in-visualstudio/</guid>
      <description> testing library/framework files code under test file(s) any additional files required to run code under test  /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/scripts/jquery-1.10.2.min.js&amp;#34; /&amp;gt;  /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/app/app.js&amp;#34; /&amp;gt; /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/app/home/homecontroller.js&amp;#34; /&amp;gt;  describe(&amp;#39;home page&amp;#39;, function() { it(&amp;#39;should return tile as Home&amp;#39;, function() { expect(&amp;#39;home&amp;#39;).toBe(&amp;#39;home&amp;#39;); }); </description>
    </item>
    
  </channel>
</rss>
