<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setup techniques on kodebot</title>
    <link>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/</link>
    <description>Recent content in Setup techniques on kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Fri, 22 Feb 2019 10:25:49 +0000</lastBuildDate>
    
	<atom:link href="http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple test data</title>
      <link>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/1-simple-test-data/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/1-simple-test-data/</guid>
      <description>When we need data, we just create variables with the data and use them in the other places within the unit test.
consider an example of testing a function that adds two numbers
function add(a, b): return a+b  to test this function, we need two input data. We can simply create two variables with the data in our test function and use them as arguments for add() function.
function test_add(): // arrange a = 10 b = 15 // act add(a, b)  </description>
    </item>
    
    <item>
      <title>Data driven test</title>
      <link>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/2-data-driven-test/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/2-data-driven-test/</guid>
      <description>When we want to test SUT, we usually want to test with different set of data. It is not ideal to create one test function for one set of input data. This is where data driven tests are helpful.
Consider the same example function that adds two numbers
function add(a, b): return a+b  To be thorough, we need to test this function with few different set of data including but not limited to negative numbers, positive numbers and zeros.</description>
    </item>
    
    <item>
      <title>Fake test dependency</title>
      <link>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/3-fake-test-dependency/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/3-fake-test-dependency/</guid>
      <description>It is very common that the SUT depends on something else. The dependency could be anything like another function, object or external system and we may not be able to control their behavior all the time. A good unit test should not be affected by the changes in the dependencies of SUT.
So, a common technique is to replace the dependencies with fake versions that we can control.
For example, consider a function that takes age of the passenger and prints whether he/she is eligible for senior citizen discount when promotion is available.</description>
    </item>
    
    <item>
      <title>Mock dependency</title>
      <link>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/4-mock-dependency/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>http://localhost/kodebot/courses/automated-unit-testing-basics/3-setup-techniques/4-mock-dependency/</guid>
      <description>While fake dependencies are really useful for unit testing, they lack in features like tracking function calls, intercepting arguments, etc.. that makes unit testing easier. Mock dependency is a dependency which offers all the benefits of fake dependencies and more features to make unit testing easier.
It is not going to be easy to create and maintain mock dependencies; this is why we generally use mocking libraries to create mock dependencies.</description>
    </item>
    
  </channel>
</rss>