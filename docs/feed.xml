<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kodebot</title>
    <link>https://kodebot.com/</link>
    <description>Recent content on Kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Thu, 28 Jan 2021 10:19:39 +0000</lastBuildDate><atom:link href="https://kodebot.com/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Result verification</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/1-result-verification/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/1-result-verification/</guid>
      <description>We use result verification technique when the test receives the result by running SUT.
Consider an example of testing a function that adds two numbers and returns the result
function add(a, b):return a+bwe verify the correctness of this function by simply checking the result returned by add function
function test_add():// arrangea = 10b = 15// actresult = add(a, b)// assertareEqual(25, result) // 25 is expected</description>
    </item>
    
    <item>
      <title>Simple test data</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/1-simple-test-data/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/1-simple-test-data/</guid>
      <description>When we need data, we just create variables with the data and use them in the other places within the unit test.
consider an example of testing a function that adds two numbers
function add(a, b):return a+bto test this function, we need two input data. We can simply create two variables with the data in our test function and use them as arguments for add() function.
function test_add():// arrangea = 10b = 15// actadd(a, b)</description>
    </item>
    
    <item>
      <title>Structure</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/2-structure-of-unit-test/1-structure/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/2-structure-of-unit-test/1-structure/</guid>
      <description>Any unit test will have two or more of the following steps
 Setup Run SUT Verification Cleanup  Setup One of the first step in writing unit test is Setup. In this step, we prepare test data, dependencies and/or the context for the test.
For example, we will replace any real dependencies with fake ones and define set of good test data as part of this step.
However, this step is not necessary for all the tests.</description>
    </item>
    
    <item>
      <title>Test driven development</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/5-test-driven-or-test-oriented/1-test-driven-development/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/5-test-driven-or-test-oriented/1-test-driven-development/</guid>
      <description>Test driven development (TDD) is a popular approach for writing unit tests.
With this approach, we write a test first, see it fail, then write production code to make the test pass.
Typically, we repeat the steps below in that order
 take a small requirement write failing test for the requirement write production code to make test pass refactor  It is claimed that TDD helps to write code that simple, flexible and just enough to satisfy the requirement.</description>
    </item>
    
    <item>
      <title>What is automated unit testing?</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/1-what-is-automated-unit-testing/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/1-what-is-automated-unit-testing/</guid>
      <description>Let&amp;rsquo;s first understand what we call as Unit. The term unit is very subjective, so it means different things to different people. In the context of testing, I like to think of unit as one or more lines of code that does something small but tangible to move towards achieving the end goal of the program.
What do I mean by this? Well, lets look at an example of a very simple calculator program.</description>
    </item>
    
    <item>
      <title>What is SOLID principles?</title>
      <link>https://kodebot.com/tutorials/solid-principles/1-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/solid-principles/1-introduction/</guid>
      <description>Watch video SOLID is mnemonic acronym where each letter represents one principle.
The principles were first introduced by Robert C. Martin but the acronym was later introduced by Michael Feathers.
The following are the principles that makes up SOLID
 Single Responsibility Principle Open-Closed Principle Liskov Substitution Principle Interface Segregation Principle Dependency Inversion Principle  When designing software using object oriented methodology, the SOLID principles help to keep the design readable, flexible and maintainable.</description>
    </item>
    
    <item>
      <title>Data driven test</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/2-data-driven-test/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/2-data-driven-test/</guid>
      <description>When we want to test SUT, we usually want to test with different set of data. It is not ideal to create one test function for one set of input data. This is where data driven tests are helpful.
Consider the same example function that adds two numbers
function add(a, b):return a+bTo be thorough, we need to test this function with few different set of data including but not limited to negative numbers, positive numbers and zeros.</description>
    </item>
    
    <item>
      <title>State verification</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/2-state-verification/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/2-state-verification/</guid>
      <description>State verification is similar to result verification but rather than checking the result of SUT, we check the state of an object or something similar.
Consider an example of testing a function that closes the database connection
module databaseManagerisOpenfunction close():isOpen = falseWhen we call this function, it is not going to return anything, instead it is going to change the state of isOpen field
So we need to verify the state of isOpen field to ensure the correctness of close function</description>
    </item>
    
    <item>
      <title>Test oriented development</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/5-test-driven-or-test-oriented/2-test-oriented-development/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/5-test-driven-or-test-oriented/2-test-oriented-development/</guid>
      <description>Test oriented development is another approach where it is not important to write tests first but it is important to write test while writing production code.
Typically, we repeat the steps below in that order
 take a small requirement write production code write unit tests refactor  </description>
    </item>
    
    <item>
      <title>Why are we writing unit tests?</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/2-why-are-we-writing-unit-tests/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/2-why-are-we-writing-unit-tests/</guid>
      <description>We can find many reasons for writing unit tests, there are three reasons that stands out in my opinion
 Verify the correctness of the code Provide safety-net when we want to change the code (feedback mechanism) Serve as a documentation of the code  Verify the correctness of the code I don&amp;rsquo;t think any good developer will just write code and say the work is done. They will test it, either via manual steps or by writing automated unit tests, to verify whether the implementation is correct or not.</description>
    </item>
    
    <item>
      <title>Single Responsibility Principle</title>
      <link>https://kodebot.com/tutorials/solid-principles/2-single-responsibility-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/solid-principles/2-single-responsibility-principle/</guid>
      <description>Watch video Single Responsibility Principle (SRP) is about how we separate or modularise code in object oriented design. This principle says that
 A class should have only one reason to change
 If we naively apply this principle, we will end up with several classes where each class contains just one method and that just does one small thing. This leads to unnecessary complexity. This is clearly not what we want to achieve with this principle.</description>
    </item>
    
    <item>
      <title>Fake test dependency</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/3-fake-test-depencency/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/3-fake-test-depencency/</guid>
      <description>It is very common that the SUT depends on something else. The dependency could be anything like another function, object or external system and we may not be able to control their behavior all the time. A good unit test should not be affected by the changes in the dependencies of SUT.
So, a common technique is to replace the dependencies with fake versions that we can control.
For example, consider a function that takes age of the passenger and prints whether he/she is eligible for senior citizen discount when promotion is available.</description>
    </item>
    
    <item>
      <title>Interaction verification</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/3-interaction-verification/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/3-interaction-verification/</guid>
      <description>Interaction verification is completely different from result and state verification. With this technique, we will be checking whether an interaction under a specific condition has happened or not.
Consider the example below, the databaseManager module offers a function to close database, but it neither returns any result nor changes the state. All this function does is that it calls a function in database module.
module databaseManagerfunction close():database.close()So, the only thing we can do to verify the correctness of this function is to check whether it calls close() function in database module or not</description>
    </item>
    
    <item>
      <title>What is good unit test?</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/3-what-is-good-unit-test/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/3-what-is-good-unit-test/</guid>
      <description>When writing tests for any block of code, it must be comprehensive and cover all the scenarios. If we write tests for most obvious scenarios and don&amp;rsquo;t cover the less common scenarios then we don&amp;rsquo;t know how it is going to behave on those untested scenarios.
Each test we write should have the following qualities
 Quick to run Repeatable Focused Isolated Self validating  Quick to run When running unit test, we don&amp;rsquo;t want to wait long.</description>
    </item>
    
    <item>
      <title>Open-Closed Principle</title>
      <link>https://kodebot.com/tutorials/solid-principles/3-open-closed-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/solid-principles/3-open-closed-principle/</guid>
      <description>Watch video Open-Closed Principle(OCP) says software must be open for extension but closed for modification. When we first hear this, it might sound like oxymoron but it is not when we understand this principle correctly.
This principle was first introduced by Bertrand Meyer and his definition of this principle is:
 Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.</description>
    </item>
    
    <item>
      <title>Mock dependency</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/4-mock-dependency/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/4-mock-dependency/</guid>
      <description>While fake dependencies are really useful for unit testing, they lack in features like tracking function calls, intercepting arguments, etc.. that makes unit testing easier. Mock dependency is a dependency which offers all the benefits of fake dependencies and more features to make unit testing easier.
It is not going to be easy to create and maintain mock dependencies; this is why we generally use mocking libraries to create mock dependencies.</description>
    </item>
    
    <item>
      <title>Other types of automated testing</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/4-other-types-of-automated-testing/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/4-other-types-of-automated-testing/</guid>
      <description>While unit test targets small piece of code, we have other types of test that generally focus at higher level than unit tests. Two examples of such types of test we have are
 Integration tests End to end tests  Generally, unit tests focus on small piece of code without considering the behavior of dependencies they have (usually with the help of fake dependencies). This means we will be able to verify whether the target code works on it own or not, but we will not know whether it is going to work correctly as a part of bigger program.</description>
    </item>
    
    <item>
      <title>Liskov Substitution Principle</title>
      <link>https://kodebot.com/tutorials/solid-principles/4-liskov-substitution-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/solid-principles/4-liskov-substitution-principle/</guid>
      <description>Watch video Liskov Substitution Principle(LSP) is about substitution of one object for another without affecting the program that uses those objects.
Barbara Liskov introduced this principle and she says
 What is wanted here is something like the following substitution property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behaviour of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</description>
    </item>
    
    <item>
      <title>Interface Segregation Principle</title>
      <link>https://kodebot.com/tutorials/solid-principles/5-interface-segregation-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/solid-principles/5-interface-segregation-principle/</guid>
      <description>Watch video Interface Segregation Principle(ISP) was introduced by Robert C. Martin. He says
 Clients should not be forced to depend on methods it does not use
 There may be scenarios where we may have a class that has members(fields, properties or methods) used by two or more clients. When changing any of the members used by one client, all the clients of the class, even the ones that are not using the changing members, are affected.</description>
    </item>
    
    <item>
      <title>System Under Test (SUT)</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/5-system-under-test/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/5-system-under-test/</guid>
      <description>The implementation of System Under Test (SUT) that are the target of our unit test can be one of the following
 direct implementation indirect implementation combination of the above  Direct implementation If a function or piece of code is direct implementation, then it will take zero or more inputs and provide some results or cause state change with very little or no dependencies.
Examples of direct implementation
 Functions that implement individual operations of a calculator program like addition, subtraction, etc&amp;hellip; Function that creates new student object Function that validates bank account number  Indirect implementation Normally a function or piece of code falls under this type when it gets something done via one or more of its dependencies rather than doing it on its own.</description>
    </item>
    
    <item>
      <title>Dependency Inversion Principle</title>
      <link>https://kodebot.com/tutorials/solid-principles/6-dependency-inversion-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/solid-principles/6-dependency-inversion-principle/</guid>
      <description>Watch video Dependency Inversion Principle(DIP) is introduced by Robert C. Martin and his definition is
 A. High-level modules should not depend on low-level modules. Both should depend on abstractions.
  B. Abstractions should not depend upon details. Details should depend upon abstractions.
 Let&amp;rsquo;s look at an example of hypothetical mortgage application system.
We have higher level Mortgage module with Application class and BureauData module at the next level with BureauDataProvider class and at lower level we have Utility module with DataCleaner class</description>
    </item>
    
    <item>
      <title>tmux One Minute Guide</title>
      <link>https://kodebot.com/blog/2021/tmux-one-minute-guide/</link>
      <pubDate>Thu, 28 Jan 2021 10:19:39 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2021/tmux-one-minute-guide/</guid>
      <description>What is tmux? tmux is terminal multiplexer that allows your terminal to be split into different sessions, windows and panes. One of the great thing about tmux is that, you can detach from and reattach to, tmux sessions without terminating the programs running in those sessions.
Session - is a wrapper for your windows and panes that you can create, detach from and reattach to without terminating the programs running in the sessions</description>
    </item>
    
    <item>
      <title>NodeJs: Loops, Closure and Async Invocation</title>
      <link>https://kodebot.com/blog/2015/nodejs-loops/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/nodejs-loops/</guid>
      <description>Closure Closure is something that is very familiar to all C# developers who know lambda expressions/functions but they just may not know that it is called Closure in JavaScript.
Lets look at what is closure in JavaScript without further ado with an example:
function outer(){ var inOuter = &amp;#34;outer&amp;#34;; inner(); function inner(){ console.log(inOuter); // prints &amp;#39;outer&amp;#39; 	} } In this example, the variable inOuter is defined in the function outer but it is used in the function inner.</description>
    </item>
    
    <item>
      <title>Exception Handling in NodeJS</title>
      <link>https://kodebot.com/blog/2015/exception-handling-in-nodejs/</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/exception-handling-in-nodejs/</guid>
      <description>Introduction Exception handling in Node might look completely different for developers coming from C# background like myself. It is mainly because of the way Node works. Node uses single thread based event loop to enable concurrency, this results in higher throughput with relatively low overhead. When it comes to exception handling, having some understanding of the event loop will help you to do the right thing.
Event Loop Node has the following three main components to achieve concurrent, non-blocking execution</description>
    </item>
    
    <item>
      <title>Unit Testing Entity Framework async Queries</title>
      <link>https://kodebot.com/blog/2015/unit-testing-entity-framework-async-queries/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/unit-testing-entity-framework-async-queries/</guid>
      <description>Introduction In my last article, we have seen how to unit test Entity Framework queries. Now, let&amp;rsquo;s look at how to unit test async queries. When using async tasks, if we don&amp;rsquo;t use it all the way then we are not using async tasks properly. For example, if you have async action method in your controller which queries database synchronously to send some data to the requester, then we are NOT using async properly as the thread is blocked during database operation.</description>
    </item>
    
    <item>
      <title>Unit Testing Entity Framework Queries</title>
      <link>https://kodebot.com/blog/2015/unit-testing-entity-framework-queries/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/unit-testing-entity-framework-queries/</guid>
      <description>Introduction When writing unit tests, we should test only one thing at once and isolate the system under test(SUT) from all the dependencies. We should follow the same approach for any LINQ queries you write to retrieve data from the underlying Database. But, I have seen many developers excluding the whole data access layer from unit testing. This is not right approach to follow IMHO. Many developers don&amp;rsquo;t bother unit testing data access layer because of the perceived effort and complexity involved in isolating the data access layer from underlying Database and ORM tools like Entity Framework.</description>
    </item>
    
    <item>
      <title>VS-TAC - Cordova version</title>
      <link>https://kodebot.com/blog/2015/vs-tac-cordova-version/</link>
      <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/vs-tac-cordova-version/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>ASP.NET MVC 5 - JsonResult with Http Status Code 400</title>
      <link>https://kodebot.com/blog/2015/aspnet-mvc-5-jsonresult-with-http-status-code-400/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/aspnet-mvc-5-jsonresult-with-http-status-code-400/</guid>
      <description>ASP.NET Web API 2 introduced several helper methods like Ok, NotFound, BadRequest, etc… . This allows us to write code which makes its intentions clear.
In recent times, I have been working in semi-single page application which uses ASP.NET MVC 5 and AngularJS. The application is designed in a way that, there is only one view per feature and each view is SPA. So, each ASP.NET MVC controller have only one GET action that returns the view and rest of the communication is using actions that returns JsonResult that can be used by client in AJAX style just like consuming Web API.</description>
    </item>
    
    <item>
      <title>AngularJS 1.x - Validation on File Input type</title>
      <link>https://kodebot.com/blog/2015/angularjs-1x-validation-on-file-input-type/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/angularjs-1x-validation-on-file-input-type/</guid>
      <description>&amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;col-md-2 control-label&amp;#34; for=&amp;#34;photoUrl&amp;#34;&amp;gt;Photo&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;col-md-4&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;input-group&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;btn btn-primary btn-file input-group-addon&amp;#34;&amp;gt; Browse &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;photoUrlSelector&amp;#34; name=&amp;#34;photoUrlSelector&amp;#34; accept=&amp;#34;image/*&amp;#34; &amp;gt; &amp;lt;/span&amp;gt; &amp;lt;input class=&amp;#34;form-control&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;photoUrl&amp;#34; name=&amp;#34;photoUrl&amp;#34; data-ng-disabled=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;span class=&amp;#34;btn btn-primary btn-file input-group-addon&amp;#34;&amp;gt; Browse &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;photoUrlSelector&amp;#34; name=&amp;#34;photoUrlSelector&amp;#34; accept=&amp;#34;image/*&amp;#34;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;btn btn-primary btn-file input-group-addon&amp;quot;&amp;gt;Browse &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;photoUrlSelector&amp;quot; name=&amp;quot;photoUrlSelector&amp;quot; ngf-select ng-model=&amp;quot;vm.author.photoUrl&amp;quot; accept=&amp;quot;image/*&amp;quot; data-ng-click=&amp;quot;addAuthorForm.photoUrl.$touched=true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;input class=&amp;#34;form-control&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;photoUrl&amp;#34; name=&amp;#34;photoUrl&amp;#34; data-ng-model=&amp;#34;vm.author.photoUrl[0].name&amp;#34; data-ng-required=&amp;#34;true&amp;#34; data-ng-disabled=&amp;#34;true&amp;#34;&amp;gt; as you can see, the input field is also decorated with ng-required directive to enforce required field validation.</description>
    </item>
    
    <item>
      <title>Angular 1.x - Unit Testing a function that returns Promise</title>
      <link>https://kodebot.com/blog/2015/angular-1x-unit-testing-a-function-that-returns-promise/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/angular-1x-unit-testing-a-function-that-returns-promise/</guid>
      <description>var app = angular.module(&amp;#34;app&amp;#34;); app.controller(&amp;#34;studentController&amp;#34;, function($q, studentDataService){ var vm = this; vm.students = undefined; activate(); function activate (){ vm.students = getAllStudents(); } function getAllStudents(){ return studentDataService .getAll(); } }); it(&amp;#34;should get students on activation&amp;#34;, function(done){ // Fixture Setup  // Exercise Systcode  var sut = $controller(&amp;#34;studentController&amp;#34;); // Verify Outcome  sut.students.then(function(data){ expect(data).toBeDefined(); done(); }); $rootScope.$apply(); // Fixture Teardown }); </description>
    </item>
    
    <item>
      <title>TypeScript - Accessing object with null key</title>
      <link>https://kodebot.com/blog/2015/typescript-accessing-object-with-null-key/</link>
      <pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-accessing-object-with-null-key/</guid>
      <description>var car = { wheels : 3, colour: &amp;#39;red&amp;#39;, drive: function(){ ... } } routes[null].redirectTo An index expression argument must be of type string, number, symbol, or any.
var nullRef: any = null; routes[nullRef].redirectTo </description>
    </item>
    
    <item>
      <title>ASP.NET MVC 5 Hosting for Integration / E2E Testing</title>
      <link>https://kodebot.com/blog/2015/aspnet-mvc-5-hosting-for-integration-e2e-testing/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/aspnet-mvc-5-hosting-for-integration-e2e-testing/</guid>
      <description>public static class ApplicationUtilities { private static Process _webHostProcess; private const string WEB_APP_NAME = &amp;#34;BookShop.Web&amp;#34;; private const int WEB_APP_PORT = 12345; public static void StartApplication() { var webHostStartInfo = GetProcessStartInfo(); _webHostProcess = Process.Start(webHostStartInfo); _webHostProcess.TieLifecycleToParentProcess(); } public static void StopApplication() { if (_webHostProcess == null) return; if (!_webHostProcess.HasExited) _webHostProcess.Kill(); _webHostProcess.Dispose(); } public static string ApplicationBaseUrl { get { return string.Format(&amp;#34;http://localhost:{0}&amp;#34;, WEB_APP_PORT); } } public static string GetFullUrl(string relativePath) { return string.Format(&amp;#34;{0}{1}&amp;#34;, ApplicationUtilities.</description>
    </item>
    
    <item>
      <title>How to isolate AutoMapper in Unit Tests?</title>
      <link>https://kodebot.com/blog/2015/how-to-mock-automapper-in-unit-tests/</link>
      <pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/how-to-mock-automapper-in-unit-tests/</guid>
      <description>kernel.Bind&amp;lt;IMappingEngine&amp;gt;().ToConstant(Mapper.Engine); services.AddInstance&amp;lt;IMappingEngine&amp;gt;(Mapper.Engine); var mockMapper = new Mock&amp;lt;IMappingEngine&amp;gt;(); mockMapper.Setup(mock =&amp;gt; mock.Map&amp;lt;TargetType&amp;gt;(It.IsAny&amp;lt;SourceType&amp;gt;())).Returns(targetInstance); public class User { public int Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } } public class UserDto { public int Id { get; set; } public string FirstName { get; set; } } public class Sut { private readonly IMappingEngine _mapper; public Sut(IMappingEngine mapper) { _mapper = mapper; } public User Run(UserDto dto) { return _mapper.</description>
    </item>
    
    <item>
      <title>ASP.NET 5 - Tag Helpers, the HTML way</title>
      <link>https://kodebot.com/blog/2015/asp-net-5-tag-helpers-the-html-way/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/asp-net-5-tag-helpers-the-html-way/</guid>
      <description>// Old style tag helpers @Html.LabelFor(Model =&amp;gt; Model.Name, &amp;#34;User Name&amp;#34;, new { @class = &amp;#34;control-label&amp;#34; }); // Declarative style &amp;lt;label asp-for=&amp;#34;Name&amp;#34; class=&amp;#34;control-label&amp;#34;&amp;gt;User Name&amp;lt;/label&amp;gt; // add tag helpers @addTagHelper &amp;#34;*, Microsoft.AspNet.Mvc.TagHelpers&amp;#34; // ITagHelper int Order { get; } Task ProcessAsync(TagHelperContext context, TagHelperOutput output); // Custom tag helper example [TargetElement(&amp;#34;div&amp;#34;, Attributes = &amp;#34;panel-title&amp;#34;)] [TargetElement(&amp;#34;div&amp;#34;, Attributes = &amp;#34;panel-style&amp;#34;)] public class PanelTagHelper : TagHelper { [HtmlAttributeName(&amp;#34;panel-title&amp;#34;)] public string Title { get; set; } [HtmlAttributeName(&amp;#34;panel-type&amp;#34;)] public HtmlPanelType PanelType { get; set; } public override void Process(TagHelperContext context, TagHelperOutput output) { //&amp;lt;div class=&amp;#34;panel panel-default&amp;#34;&amp;gt;  // &amp;lt;div class=&amp;#34;panel-heading&amp;#34;&amp;gt;  // &amp;lt;h3 class=&amp;#34;panel-title&amp;#34;&amp;gt;Panel title&amp;lt;/h3&amp;gt;  // &amp;lt;/div&amp;gt;  // &amp;lt;div class=&amp;#34;panel-body&amp;#34;&amp;gt;  // Panel content  // &amp;lt;/div&amp;gt;  //&amp;lt;/div&amp;gt;  // header content  var panelHeadingContent = new TagBuilder(&amp;#34;h3&amp;#34;); panelHeadingContent.</description>
    </item>
    
    <item>
      <title>ASP.NET 5 - Environment specific pipeline configuration</title>
      <link>https://kodebot.com/blog/2015/asp-net-5-environment-specific-pipeline-configuration/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/asp-net-5-environment-specific-pipeline-configuration/</guid>
      <description>// Example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.IsEnvironment(&amp;#34;Production&amp;#34;)) { // read prod config  } else { // read dev config  } } . . . } // Full example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.</description>
    </item>
    
    <item>
      <title>Owin - Katana core middleware patterns</title>
      <link>https://kodebot.com/blog/2015/owin-katana-core-middleware-patterns/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/owin-katana-core-middleware-patterns/</guid>
      <description>// Delegate Pattern Func&amp;lt;AppFunc, AppFunc&amp;gt; where AppFunc is Func&amp;lt;IDictionary&amp;lt;string, object&amp;gt;, Task&amp;gt;&amp;gt;
// Delegate Pattern Implementation public void Configuration(IAppBuilder builder) { builder.Use(new Func&amp;lt;AppFunc, AppFunc&amp;gt;(next =&amp;gt; async env =&amp;gt; { Console.WriteLine(&amp;#34;From Delegate Middleware - Start&amp;#34;); await next(env); Console.WriteLine(&amp;#34;From Delegate Middleware - End&amp;#34;); })); } // Delegate Pattern with additional parameters public void Configuration(IAppBuilder builder) { builder.Use(new Func&amp;lt;AppFunc, string, AppFunc&amp;gt;((next, param) =&amp;gt; async (env) =&amp;gt; { Console.WriteLine(&amp;#34;From Delegate Middleware with param- Start&amp;#34;); Console.WriteLine(&amp;#34;Paramater value : {0}&amp;#34;, param); await next(env); Console.</description>
    </item>
    
    <item>
      <title>TypeScript - &#39;this&#39; reference in AngularJS event handler</title>
      <link>https://kodebot.com/blog/2015/typescript-this-reference-in-angularjs-event-handler/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-this-reference-in-angularjs-event-handler/</guid>
      <description>// Controller using class module App.Home { interface IHomeViewModel { title: string; } class HomeController implements IHomeViewModel { title: string = &amp;#34;Welcome!!!&amp;#34;; static $inject = [&amp;#34;$location&amp;#34;, &amp;#34;$rootScope&amp;#34;] constructor( private $location: ng.ILocationService, private $rootScope: ng.IRootScopeService) { } } angular.module(&amp;#34;app&amp;#34;) .controller(&amp;#34;homeController&amp;#34;, HomeController); } In this example, an interface called IHomeViewModel is created to represent the public members of the controller and a class HomeController is created which implements the interface.Dependencies are injected using static $inject member and injected dependencies are declared as private members.</description>
    </item>
    
    <item>
      <title>TypeScript build automation in ASP.NET 5 (MVC6) using Gulp</title>
      <link>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</guid>
      <description># creates package.json npm init # install packages npm install gulp gulp-typescript gulp-tslint gulp-tslint-stylish gulp-sourcemaps gulp-inject gulp-rimraf --save-dev // Package imports var gulp = require(&amp;#39;gulp&amp;#39;); var typescript = require(&amp;#39;gulp-typescript&amp;#39;); var tslint = require(&amp;#39;gulp-tslint&amp;#39;); var tslintStyle = require(&amp;#39;gulp-tslint-stylish&amp;#39;); var sourcemaps = require(&amp;#39;gulp-sourcemaps&amp;#39;); var inject = require(&amp;#39;gulp-inject&amp;#39;); var rimraf = require(&amp;#39;gulp-rimraf&amp;#39;); // clean gulp.task(&amp;#39;clean&amp;#39;, function () { gulp.src(&amp;#39;wwwroot/js/app&amp;#39;, { read: false }) .pipe(rimraf()) }); // TS Lint var tsLintConfig = require(&amp;#39;./tslintConfig&amp;#39;); gulp.task(&amp;#39;ts-lint&amp;#39;, function () { gulp.</description>
    </item>
    
    <item>
      <title>MVC 6 Camel Case JSON</title>
      <link>https://kodebot.com/blog/2015/mvc-6-camel-case-json/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/mvc-6-camel-case-json/</guid>
      <description>This means, if you have an application which uses both MVC controllers and Web API controllers then you need to apply any custom JSON serialization configurations twice or you should replace JavaScriptSerializer with JSON.NET.
// Sample  public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddMvc() .Configure&amp;lt;MvcOptions&amp;gt;(options =&amp;gt; { var jsonOutputFormatter = new JsonOutputFormatter(); jsonOutputFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); options.OutputFormatters.Insert(0, jsonOutputFormatter); }); } public void Configure(IApplicationBuilder app) { app.UseMvc(); } } </description>
    </item>
    
    <item>
      <title>TPL Task and Windows Identity Impersonation - The beauty of Closure</title>
      <link>https://kodebot.com/blog/2015/tpl-task-and-windows-identity-impersonation-the-beauty-of-closure/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/tpl-task-and-windows-identity-impersonation-the-beauty-of-closure/</guid>
      <description>// naive task code  Task.Run(() =&amp;gt; { // Task code here }); To make this work, I need to invoke the method in the task under impersonated context. The easiest way is to capture the WindowsIdentity and make it available to the task function so it can execute any code under the impersonated context.
// Task using closure var currentWindowsIdentity = WindowsIdentity.GetCurrent(); Task.Run(() =&amp;gt; { using (currentWindowsIdentity.Impersonate()) { // Task code here  } }); </description>
    </item>
    
    <item>
      <title>Selenium and Page Objects</title>
      <link>https://kodebot.com/blog/2015/selenium-and-page-objects/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/selenium-and-page-objects/</guid>
      <description>// Search Page 	public class BingSearch { private IWebElement _searchTerm; private List&amp;lt;BingSearchResult&amp;gt; _searchResults; public BingSearch() { Browser.GoTo(&amp;#34;http://www.bing.com&amp;#34;); } public string SearchTerm { get { return _searchTerm.Text; } set { _searchTerm = _searchTerm ?? Browser.WebDriver.FindElement(By.Name(&amp;#34;q&amp;#34;)); _searchTerm.SendKeys(value); } } public void Search() { if (_searchTerm != null) { if (_searchResults != null) { _searchResults.Clear(); } _searchTerm.Submit(); } } public List&amp;lt;BingSearchResult&amp;gt; SearchResults { get { _searchResults = _searchResults ?? new List&amp;lt;BingSearchResult&amp;gt;(); if (!</description>
    </item>
    
    <item>
      <title>ECMAScript 6 - Sublime Text editor build system</title>
      <link>https://kodebot.com/blog/2015/ecmascript-6-sublime-text-editor-build-system/</link>
      <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/ecmascript-6-sublime-text-editor-build-system/</guid>
      <description>// gulpfile.js var gulp = require(&amp;#39;gulp&amp;#39;); var babel = require(&amp;#39;gulp-babel&amp;#39;); var shell = require(&amp;#39;gulp-shell&amp;#39;); gulp.task(&amp;#39;run&amp;#39;, function(){ return gulp.src(&amp;#39;app.js&amp;#39;) .pipe(babel()) .pipe(gulp.dest(&amp;#39;result&amp;#39;)) .pipe(shell([&amp;#39;node result\\app.js&amp;#39;])); }); { &amp;#34;cmd&amp;#34;: [&amp;#34;gulp.cmd&amp;#34;, &amp;#34;run&amp;#34;] } This setup is only recommended if you just want to play with ES6 like me. The grunt task uses hard coded files names and you need to use the same file name to get it working.
</description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 3</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-3/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-3/</guid>
      <description>// sample 1 app.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { getAllMovies: getAllMovies } function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 2  app.config(function($provide) { $provide.decorator(&amp;#39;movieService&amp;#39;, movieServiceDecorator); function movieServiceDecorator($delegate) { var originalGetAllMovies = $delegate.getAllMovies; $delegate.getAllMovies = function() { var result = originalGetAllMovies(); return result.slice(0,2); } return $delegate; } }); </description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 2</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-2/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-2/</guid>
      <description>// sample 1 $provide.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 2 var app = angular.module(&amp;#39;app&amp;#39;); app.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 3  app.service(&amp;#39;movieService&amp;#39;, movieService); function movieService() { this.getAllMovies = getAllMovies; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 4  app.</description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 1</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-1/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-1/</guid>
      <description>// provider sample 1  $provide.provider(&amp;#39;movieService&amp;#39;, movieServiceProvider); // provider  function movieServiceProvider() { var self = this; this.$get = movieService; // factory  this.isFrench = false; function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { if (self.isFrench) { return [&amp;#39;frenchMovie1&amp;#39;, &amp;#39;frenchMovie2&amp;#39;, &amp;#39;frenchMovie3&amp;#39;]; } else { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } } } // provider sample 2  var app = angular.module(&amp;#39;app&amp;#39;, []); app.config(function($provide) { // creates and register&amp;#39;s provider  var movieServiceProviderInstance = $provide.</description>
    </item>
    
    <item>
      <title>NSequenceComparer to compare two sequences</title>
      <link>https://kodebot.com/blog/2015/nsequencecomparer-to-compare-two-sequences/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/nsequencecomparer-to-compare-two-sequences/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mocking function that returns promise</title>
      <link>https://kodebot.com/blog/2015/mocking-function-that-returns-promise/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/mocking-function-that-returns-promise/</guid>
      <description>// homeController (function () { &amp;#39;use strict&amp;#39;; angular .module(&amp;#39;app&amp;#39;) .controller(&amp;#39;homeController&amp;#39;, [&amp;#39;restaurantService&amp;#39;, homeController]); function homeController(restaurantService) { // #region viewmodel  var vm = this; vm.restaurants = []; // #endregion  // #region activate  activate(); function activate() { getRestaurants(); } // #endregion  // #region internal methods  function getRestaurants() { restaurantService.getRestaurants() .then(function (data) { vm.restaurants = data; }) .catch(function (error) { // error  }); } // #endregion  } })(); // unit test describe(&amp;#39;home page&amp;#39;, function () { var $controller; var $q; var restaurantService; beforeEach(function () { // load module  module(&amp;#39;app&amp;#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.</description>
    </item>
    
    <item>
      <title>Strucuring unit tests</title>
      <link>https://kodebot.com/blog/2015/structuring-unit-tests/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/structuring-unit-tests/</guid>
      <description>public class AddressValidator { public bool IsValid(IList&amp;lt;string&amp;gt; addressLines) { if (addressLines == null) { throw new ArgumentNullException(&amp;#34;addressLines&amp;#34;, &amp;#34;AddressLines cannot be null&amp;#34;); } if (addressLines.ElementAtOrDefault(0) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(4) != null) { return true; } if (addressLines.ElementAtOrDefault(0) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(1) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(2) != null) { return true; } return false; } public bool IsNonUkAddress(IEnumerable&amp;lt;string&amp;gt; addressLines) { // return true for UK address  return false; } } [TestClass] public class AddressVaidatorTests { private AddressValidator _target; [TestInitialize] public virtual void TestSetup() { _target = new AddressValidator(); // other test setups that are common for all the tests in this file.</description>
    </item>
    
    <item>
      <title>Decorator over Inheritance hierarchy</title>
      <link>https://kodebot.com/blog/2015/decorator-over-inheritance-hierarchy/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/decorator-over-inheritance-hierarchy/</guid>
      <description>public class Command : ICommand { public bool CanExecute(object parameter) { // normal can execute version  return true; } public event EventHandler CanExecuteChanged; public void Execute(object parameter) { // normal execute version  } } public class AuditedCommand:Command { public bool CanExecute(object parameter) { // audited can execute version  return base.CanExecute(parameter); } public void Execute(object parameter) { // audited execute version  base.Execute(parameter); } } public class SecureCommand : Command { public bool CanExecute(object parameter) { // Secure can execute version  return base.</description>
    </item>
    
    <item>
      <title>Organize AngularJS Tests within a test file</title>
      <link>https://kodebot.com/blog/2015/organize-angularjs-tests-within-a-spec/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/organize-angularjs-tests-within-a-spec/</guid>
      <description>var $controller; var calculatorService; beforeEach(function () { // load module  module(&amp;#39;app&amp;#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.value(&amp;#39;service&amp;#39;, &amp;#39;override&amp;#39;);  }); // initialise  inject(function(_$controller_, _calculatorService_) { $controller = _$controller_; calculatorService = _calculatorService_; }); }); it(&amp;#39;should initialise the controller successfully&amp;#39;, function() { // act  var result = $controller(&amp;#39;homeController&amp;#39;); // assert  expect(result).toBeDefined(); }); describe(&amp;#39;when add is performed&amp;#39;, function() { it(&amp;#39;should invoke add in calculatorService&amp;#39;, function() { // arrange  // replace original method with spy  calculatorService.</description>
    </item>
    
    <item>
      <title>Setup Chutzpah to Run Javascript Tests in VisualStudio</title>
      <link>https://kodebot.com/blog/2015/setup-chutzpah-to-run-javascript-tests-in-visualstudio/</link>
      <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/setup-chutzpah-to-run-javascript-tests-in-visualstudio/</guid>
      <description> testing library/framework files code under test file(s) any additional files required to run code under test  /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/scripts/jquery-1.10.2.min.js&amp;#34; /&amp;gt;  /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/app/app.js&amp;#34; /&amp;gt; /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/app/home/homecontroller.js&amp;#34; /&amp;gt;  describe(&amp;#39;home page&amp;#39;, function() { it(&amp;#39;should return tile as Home&amp;#39;, function() { expect(&amp;#39;home&amp;#39;).toBe(&amp;#39;home&amp;#39;); }); </description>
    </item>
    
  </channel>
</rss>
