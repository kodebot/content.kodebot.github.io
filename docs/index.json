[
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/",
	"title": "Automated unit testing basics",
	"tags": [],
	"description": "",
	"content": " Table of content  Course overview     Introduction    What is automated unit testing?     Why are we writing unit tests?     What is good unit test?     Other types of automated testing     System Under Test (SUT)      Structure of unit test    Structure      Setup techniques    Simple test data     Data driven test     Fake test dependency     Mock dependency      Verification techniques    Result verification     State verification     Interaction verification      Test driven or test oriented    Test driven development     Test oriented development      "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/1-course-overview/",
	"title": "Course overview",
	"tags": [],
	"description": "",
	"content": " Course overview Welcome to automated unit testing basics course.\nThis course is for anyone who has some knowledge of computer programming but have limited or no knowledge of automated unit testing.\nThis course is language, framework and tools agnostic. Everything you learn from this course can be applied to any programming language with the use of right tools.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Introduction In this chapter, we will see what is automated unit testing, why we need them, what are the qualities of good unit tests and what are the other types of tests we have.\nFinally, we will take a brief look at different implementation types of the code that we need to be aware of when writing unit tests.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/1-result-verification/",
	"title": "Result verification",
	"tags": [],
	"description": "",
	"content": "We use result verification technique when the test receives the result by running SUT.\nConsider an example of testing a function that adds two numbers and returns the result\nfunction add(a, b): return a+b  we verify the correctness of this function by simply checking the result returned by add function\nfunction test_add(): // arrange a = 10 b = 15 // act result = add(a, b) // assert areEqual(25, result) // 25 is expected  "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/1-simple-test-data/",
	"title": "Simple test data",
	"tags": [],
	"description": "",
	"content": "When we need data, we just create variables with the data and use them in the other places within the unit test.\nconsider an example of testing a function that adds two numbers\nfunction add(a, b): return a+b  to test this function, we need two input data. We can simply create two variables with the data in our test function and use them as arguments for add() function.\nfunction test_add(): // arrange a = 10 b = 15 // act add(a, b)  "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/2-structure-of-unit-test/1-structure/",
	"title": "Structure",
	"tags": [],
	"description": "",
	"content": " Any unit test will have two or more of the following steps\n Setup Run SUT Verification Cleanup  Setup One of the first step in writing unit test is Setup. In this step, we prepare test data, dependencies and/or the context for the test.\nFor example, we will replace any real dependencies with fake ones and define set of good test data as part of this step.\nHowever, this step is not necessary for all the tests.\nThis step is commonly referred to as Arrange or Fixture setup\nRun SUT This is the step that runs the SUT with test data and/or fake dependencies. This is a mandatory step for any unit test.\nThis step is commonly referred to as Act or Exercise sut\nVerification This step verifies the result of running SUT under test condition. This is a mandatory step.\nThis step is commonly referred to as Assert or Verify Outcome\nCleanup This is optional step and needed only when any clean up is required after the test run. This step is commonly referred to as Fixture teardown\nAAA One of the popular acronym for testing steps or phases is AAA, and it refers to Arrange, Act and Assert. Because cleanup is not a common step, it is omitted.\nHere is an example of AAA pattern test:\nfunction test_add(): // arrange a = 10 b = 15 // act result = add(a, b) // assert areEqual(25, result) // 25 is expected  "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/5-test-driven-or-test-oriented/1-test-driven-development/",
	"title": "Test driven development",
	"tags": [],
	"description": "",
	"content": "Test driven development (TDD) is a popular approach for writing unit tests.\nWith this approach, we write a test first, see it fail, then write production code to make the test pass.\nTypically, we repeat the steps below in that order 1. take a small requirement 2. write failing test for the requirement 3. write production code to make test pass 4. refactor\nIt is claimed that TDD helps to write code that simple, flexible and just enough to satisfy the requirement.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/1-what-is-automated-unit-testing/",
	"title": "What is automated unit testing?",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s first understand what we call as Unit. The term unit is very subjective, so it means different things to different people. In the context of testing, I like to think of unit as one or more lines of code that does something small but tangible to move towards achieving the end goal of the program.\nWhat do I mean by this? Well, lets look at an example of a very simple calculator program. In order to build a calculator, we need to build individual operations that are supported by the calculator. Each simple operations like addition, subtraction, multiplication and division are implemented using few lines of code and these operations are units as these are small but tangible steps needed to build a calculator.\nHowever, we cannot say all the operations supported by a calculator are made up of single unit. There are some operations like average, percentage, etc are not simple ones and they are implemented using group of units. For example, average is implemented using addition and division.\nUnit is loosely defined term and subjective. In most cases you can refer a small function/subroutine as unit but it is not always true. There may be functions/subroutines that are made up of group of units.\n So, Unit testing is taking a small piece of code that is written to do something small but tangible and test it to verify whether it is working as expected or not.\nAutomated unit testing means, the unit testing process is automated by writing code, so the tests are written once and run as many times as we like without any manual overhead.\nFor example, the tests you need for the individual units of a calculator program are called unit tests. If those tests are automated with code then you can refer to them as automated unit tests.\nI will be referring to the unit of code we are testing as System Under Test or SUT and automated unit test as simply unit test going forward.\n "
},
{
	"uri": "https://kodebot.com/blog/",
	"title": "Blog",
	"tags": [],
	"description": "",
	"content": " Posts  NodeJs: Loops, Closure and Async Invocation   Exception Handling in NodeJS   Unit Testing Entity Framework async Queries   Unit Testing Entity Framework Queries   VS-TAC - Cordova version   ASP.NET MVC 5 - JsonResult with Http Status Code 400   AngularJS 1.x - Validation on File Input type   Angular 1.x - Unit Testing a function that returns Promise   TypeScript - Accessing object with null key   ASP.NET MVC 5 Hosting for Integration / E2E Testing   How to isolate AutoMapper in Unit Tests?   ASP.NET 5 - Tag Helpers, the HTML way   ASP.NET 5 - Environment specific pipeline configuration   Owin - Katana core middleware patterns   TypeScript - \u0026#39;this\u0026#39; reference in AngularJS event handler   TypeScript build automation in ASP.NET 5 (MVC6) using Gulp   MVC 6 Camel Case JSON   TPL Task and Windows Identity Impersonation - The beauty of Closure   Selenium and Page Objects   ECMAScript 6 - Sublime Text editor build system   Six stars of AngularJS - Part 3   Six stars of AngularJS - Part 2   Six stars of AngularJS - Part 1   NSequenceComparer to compare two sequences   Mocking function that returns promise   Strucuring unit tests   Decorator over Inheritance hierarchy   Organize AngularJS Tests within a test file   Setup Chutzpah to Run Javascript Tests in VisualStudio   "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/2-data-driven-test/",
	"title": "Data driven test",
	"tags": [],
	"description": "",
	"content": "When we want to test SUT, we usually want to test with different set of data. It is not ideal to create one test function for one set of input data. This is where data driven tests are helpful.\nConsider the same example function that adds two numbers\nfunction add(a, b): return a+b  To be thorough, we need to test this function with few different set of data including but not limited to negative numbers, positive numbers and zeros.\nAlthough, it will be descriptive and easy to follow when we have one test test function per input data, it requires more development and maintenance effort.\nBetter solution is to create one test function that we can run with different set of data. This is what we call data driven tests.\nAn example of data driven test would look like this\ntype DataTest: input1 input2 result function test_add(): // arrange tests = [ [input1: 1, input2: 2, result: 3], [input1: -1, input2: -1, result: 0], [input1: 1, input2: -2, result: -1], ] // act loop test of tests: result = add(test.input1, test.input2) // assert areEqual(test.result, result)  The actual implementation of data driven test will be different based on the language and the framework used.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/2-state-verification/",
	"title": "State verification",
	"tags": [],
	"description": "",
	"content": "State verification is similar to result verification but rather than checking the result of SUT, we check the state of an object or something similar.\nConsider an example of testing a function that closes the database connection\nmodule databaseManager isOpen function close(): isOpen = false  When we call this function, it is not going to return anything, instead it is going to change the state of isOpen field\nSo we need to verify the state of isOpen field to ensure the correctness of close function\nfunction test_close(): // arrange databaseManager.isOpen = true // act databaseManager.close() // assert areEqual(false, databaseManager.isOpen) // false is expected  "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/2-structure-of-unit-test/",
	"title": "Structure of unit test",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Structure of unit test In this chapter, let\u0026rsquo;s look at the structure of the unit test.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/5-test-driven-or-test-oriented/2-test-oriented-development/",
	"title": "Test oriented development",
	"tags": [],
	"description": "",
	"content": "Test oriented development is another approach where it is not important to write tests first but it is important to write test while writing production code.\nTypically, we repeat the steps below in that order 1. take a small requirement 2. write production code 3. write unit tests 4. refactor\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/2-why-are-we-writing-unit-tests/",
	"title": "Why are we writing unit tests?",
	"tags": [],
	"description": "",
	"content": " We can find many reasons for writing unit tests, there are three reasons that stands out in my opinion\n Verify the correctness of the code Provide safety-net when we want to change the code (feedback mechanism) Serve as a documentation of the code  Verify the correctness of the code I don\u0026rsquo;t think any good developer will just write code and say the work is done. They will test it, either via manual steps or by writing automated unit tests, to verify whether the implementation is correct or not.\nSafety-net or feedback mechanism for changes Once the code is written, we may change it for various reason - ranging from changing business requirements to simply to fix a bug in the code. When we want to change code, we need to be very careful to make sure we are not introducing any bugs or unintended side effects. The term used to refer to the bugs or unintended side effects caused by code change is regression. Generally, the bigger the program gets the challenging it becomes to keep regression issues under control. This is where unit tests are really useful. If we have good, solid unit tests covering the current code then we will be able to get immediate feedback on any change the causes regression issues.\nDocumentation of the code By providing suitable name/description for the tests and keeping it covering all scenarios of the SUT, the tests can be used as a documentation or specification by developers.\n"
},
{
	"uri": "https://kodebot.com/",
	"title": "Kodebot",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/3-fake-test-dependency/",
	"title": "Fake test dependency",
	"tags": [],
	"description": "",
	"content": "It is very common that the SUT depends on something else. The dependency could be anything like another function, object or external system and we may not be able to control their behavior all the time. A good unit test should not be affected by the changes in the dependencies of SUT.\nSo, a common technique is to replace the dependencies with fake versions that we can control.\nFor example, consider a function that takes age of the passenger and prints whether he/she is eligible for senior citizen discount when promotion is available.\nThe function which tells whether the promotion is available or not is defined in another module and we don\u0026rsquo;t have control over its behavior\nmodule promotions function isPromotionsAvailable(): . . .  module discounts function isDiscountAvailable(age): if promotions.isPromotionAvailable() \u0026amp;\u0026amp; age \u0026gt; 60: print(\u0026quot;discount available\u0026quot;) else: print(\u0026quot;discount not available\u0026quot;)  However, in order to test all the branches and conditions of isDiscountAvailable() function, we need to be able to control the result of isPromotionAvailable() function. So, we first create fake version of isPromotionAvailable() function in fakePromotions module with an option for us to control the result\nmodule fakePromotions offerPromotion = true function isPromotionAvailable(): return offerPromotion  then replace the promotion with fakePromotion inside the test\nfunction test_isDiscountAvailable(): // arrange promotions = fakePromotions //replace promotions module with fakePromotions module promotions.offerPromotion = true age = 65 // act result = discounts.isDiscountAvailable(age)  Depending on the language and framework we use, the way we replace the real dependency with fake one will be different.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/3-interaction-verification/",
	"title": "Interaction verification",
	"tags": [],
	"description": "",
	"content": "Interaction verification is completely different from result and state verification. With this technique, we will be checking whether an interaction under a specific condition has happened or not.\nConsider the example below, the databaseManager module offers a function to close database, but it neither returns any result nor changes the state. All this function does is that it calls a function in database module.\nmodule databaseManager function close(): database.close()  So, the only thing we can do to verify the correctness of this function is to check whether it calls close() function in database module or not\nfunction test_close(): // arrange mockDatabase = mock(database) database = mockDatabase // act databaseManager.close() // assert mockDatabase.close().calledOnce()  "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/",
	"title": "Setup techniques",
	"tags": [],
	"description": "",
	"content": " Chapter 3 Setup techniques Let\u0026rsquo;s look at some of the basic techniques we use at the setup stage of our unit test\nWe are going to look at the following techniques\n simple test data data driven test Fake test dependency or test double Mock dependency  "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/3-what-is-good-unit-test/",
	"title": "What is good unit test?",
	"tags": [],
	"description": "",
	"content": " When writing tests for any block of code, it must be comprehensive and cover all the scenarios. If we write tests for most obvious scenarios and don\u0026rsquo;t cover the less common scenarios then we don\u0026rsquo;t know how it is going to behave on those untested scenarios.\nEach test we write should have the following qualities\n Quick to run Repeatable Focused Isolated Self validating  Quick to run When running unit test, we don\u0026rsquo;t want to wait long. Because each of the tests we write target only few lines of the code, we could easily end up with hundreds, if not thousands, of tests even for a small program/application. Our tests must be extremely fast to get the feedback quickly. So we should try to avoid anything that will slow down our tests. When this is not possible, we should at least be able to keep the slow running tests separate and run them independently without affecting fast running tests.\nRepeatable We should be able to run our tests repeatedly without any manual interventions. This means anything that our test needs should be done in the test itself.\nFor example, if we need our application to be in a particular state for running a test, then the test itself should bring the application to the desired state as a prerequisite, perform the steps necessary for the test and do any necessary cleanups at the end of the test.\nFocused We don\u0026rsquo;t want one test trying to verify too many things. Each test should verify just one thing.\nFor example, if we have a function to validate bank account number then we should try to create one test for each validation rule. That is, one test for each of the rules listed below\n verify account number is not null or empty verify account number is exactly 8 characters verify account number is only contains digits  TODO:add picture\nIsolated Any test should not depend on any other test(s). Although it is very common for a function or object to depend on other functions or objects, the test we write targeting a particular block of code should not be affected if the behavior of any of its dependent function or object changes.\nadd picture\nSelf validating Each test we write should give us the feedback at the end on its own. We should not rely on anything other than the test itself for the result.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/3-setup-techniques/4-mock-dependency/",
	"title": "Mock dependency",
	"tags": [],
	"description": "",
	"content": "While fake dependencies are really useful for unit testing, they lack in features like tracking function calls, intercepting arguments, etc.. that makes unit testing easier. Mock dependency is a dependency which offers all the benefits of fake dependencies and more features to make unit testing easier.\nIt is not going to be easy to create and maintain mock dependencies; this is why we generally use mocking libraries to create mock dependencies.\nIf we take the same passenger discount example that we have seen previously\nmodule promotions function isPromotionsAvailable(): . . .  module discounts function isDiscountAvailable(age): if promotions.isPromotionAvailable() \u0026amp;\u0026amp; age \u0026gt; 60: print(\u0026quot;discount available\u0026quot;) else: print(\u0026quot;discount not available\u0026quot;)  we create, setup and use mock version of isPromotionAvailable() like this in the tests:\nfunction test_isDiscountAvailable(): // arrange mockPromotions = mock(promotions) // create mock promotion mockPromotions.isPromotionAvailable().return(true) // setup the method to return true promotions = mockPromotions // replace promotions with mockPromotions age = 65 // act result = discounts.isDiscountAvailable(age)  Depending on the language and framework we use, the way we create, setup and use mock dependencies will be different.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/4-other-types-of-automated-testing/",
	"title": "Other types of automated testing",
	"tags": [],
	"description": "",
	"content": "While unit test targets small piece of code, we have other types of test that generally focus at higher level than unit tests. Two examples of such types of test we have are\n Integration tests End to end tests  Generally, unit tests focus on small piece of code without considering the behavior of dependencies they have (usually with the help of fake dependencies). This means we will be able to verify whether the target code works on it own or not, but we will not know whether it is going to work correctly as a part of bigger program. While this is the correct approach for unit tests, it doesn\u0026rsquo;t cover verifying the behavior with real dependencies. Integration and End to end tests falls under this category where SUT will be tested with real dependencies.\nIntegration tests aim testing SUT with one or more real dependencies and may use some fake dependencies if required. On the other hand End to end test try to test the application just like how end user will use it. End to end tests generally use publicly accessible parts like UI or API for testing. While it is not common, end to end tests can use fake dependencies if required but it should be kept to minimum.\nWhen writing tests for any application, we should use Integration and End to end tests along with Unit tests.\nPeople use the following pyramid diagram to show the distribution of these three types of tests that we should have for any program/application.\nprovide pyramid example diagram\nAs we can see, Unit tests should be the majority. We should use Integration and End to end tests as and when they are required but they are small in number compared to Unit tests.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/",
	"title": "Verification techniques",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Verification techniques One of the very important step in unit test is verification. We verify whether the SUT works as expected or not with the test data.\nWe generally use one of the following three verification techniques depending on the situation\n result verification state verification interaction verification  "
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/5-test-driven-or-test-oriented/",
	"title": "Test driven or test oriented",
	"tags": [],
	"description": "",
	"content": " Chapter 5 Test driven or test oriented In this chapter, we will look at two different approaches to writing unit tests.\n Test driven development (TDD) Test oriented development  I like to mix these two approaches depending on the situation.\n"
},
{
	"uri": "https://kodebot.com/tutorials/automated-unit-testing-basics/1-introduction/5-system-under-test/",
	"title": "System Under Test (SUT)",
	"tags": [],
	"description": "",
	"content": " The implementation of System Under Test (SUT) that are the target of our unit test can be one of the following\n direct implementation indirect implementation combination of the above  Direct implementation If a function or piece of code is direct implementation, then it will take zero or more inputs and provide some results or cause state change with very little or no dependencies.\nExamples of direct implementation\n Functions that implement individual operations of a calculator program like addition, subtraction, etc\u0026hellip; Function that creates new student object Function that validates bank account number  Indirect implementation Normally a function or piece of code falls under this type when it gets something done via one or more of its dependencies rather than doing it on its own.\nExamples of indirect implementation\n Reading/writing data in database by calling functions in the database driver Validating the account number by calling a function that provides validation  Direct and indirect We will also come across many SUT where the implementation is combination of both direct and indirect\nIt is good to be aware of these types because we might need to use different techniques for testing depending on their implementation type.\n"
},
{
	"uri": "https://kodebot.com/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": "  Automated unit testing basics   "
},
{
	"uri": "https://kodebot.com/blog/2015/nodejs-loops/",
	"title": "NodeJs: Loops, Closure and Async Invocation",
	"tags": ["NodeJS", "JavaScript"],
	"description": "",
	"content": " Closure Closure is something that is very familiar to all C# developers who know lambda expressions/functions but they just may not know that it is called Closure in JavaScript.\nLets look at what is closure in JavaScript without further ado with an example:\nfunction outer(){ var inOuter = \u0026#34;outer\u0026#34;; inner(); function inner(){ console.log(inOuter); // prints \u0026#39;outer\u0026#39; \t} }  In this example, the variable inOuter is defined in the function outer but it is used in the function inner. This is possible because, the a function in JavaScript can access all the variables in the scope where the function is defined and this is called Closure.\nLoop and Closure Lets consider the following example:\nfunction outer(){ for(var i=1; i\u0026lt;=5; i++){ inner(); } function inner(){ console.log(i); // prints 1, 2, 3, 4, 5 \t} }  Here the function inner is called from a loop and iterator variable is printed from inside the function inner. It prints, as you guessed, 1, 2, 3, 4, 5. This is because the function inner get the value of i whatever it is when the function inner is invoked.\nLoop, Closure and async invocation Lets look at what happens if we invoke the function inner asynchronously\nfunction outer(){ for(var i=1; i\u0026lt;=5; i++){ process.nextTick(inner); // We can use setImmediate or setTimeout in browser environment to get similar effect \t} function inner(){ console.log(i); // prints 6, 6, 6, 6, 6 \t} }  You may not expect it to print 6, 6, 6, 6, 6 but that\u0026rsquo;s what it does. This is because the loop runs to completion in the current tick and the function inner is only invoked in some tick down the line. So, the value of i will be 6 when function inner is executed and it prints 6.\nNow, what do you do if you want to print 1, 2, 3, 4, 5 instead of 6, 6, 6, 6, 6?\nWell, it turns out, you can do this simply by creating new function to create a new variable scope. This is because, in JavaScript variables are scoped to function instead of block.\n Note: Starting ES2015, you can use let instead of var to create block scope.\n Here is the revised code:\nfunction outer(){ for(var i=1; i\u0026lt;=5; i++){ process.nextTick((function(){ var j = i; return inner;\tfunction inner(){ console.log(j); // prints 1, 2, 3, 4, 5 \t} })()); } }  We have created a new scope and assigned value of i to j which is defined in the new scope. We have also moved the function inner to the new scope.\nThat\u0026rsquo;s it, now it prints what we want it to print.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/exception-handling-in-nodejs/",
	"title": "Exception Handling in NodeJS",
	"tags": ["NodeJS", "JavaScript"],
	"description": "",
	"content": " Introduction Exception handling in Node might look completely different for developers coming from C# background like myself. It is mainly because of the way Node works. Node uses single thread based event loop to enable concurrency, this results in higher throughput with relatively low overhead. When it comes to exception handling, having some understanding of the event loop will help you to do the right thing.\nEvent Loop Node has the following three main components to achieve concurrent, non-blocking execution\n1. Event Demultiplexer\n2. Event Loop\n3. Event Queue\nTo put it simply, any function/piece of code which depends on time consuming, non-cpu intensive I/O operation registers itself with Event Demultiplexer along with a handler. Event demultiplexer deals with the underlying I/O operation and when the data is available to process, it adds the registered event to the Event Queue to make the data available for further processing. The Event Loop simply dequeue the event and runs its associated handler.\nSynchronous Block Now, with the high level understanding of how Node\u0026rsquo;s Event Loop works, we will look at how exception handling works in a synchronous block of code.\nIf you don\u0026rsquo;t wrap your exception prone code in try..catch block then the exception would simply reach event loop and your app will crash. Any exception reaching event loop would simply result in application crash, it\u0026rsquo;s that simple. This means, if you want to provide nice user experience you have to handle the exception properly. For, synchronous block of code, this is as simple as wrapping your code in try..catch and do whatever you want to do in the catch block.\nYou should not let the exception bubble up using throw to avoid it reaching event loop and application crash.\n function divide(x, y){ try{ return x/y; } catch(e){ console.log(\u0026#34;Error::\u0026#34; + e.message); return 0; } }  In this, example the message is displayed in the console and value 0 is returned from the catch block.\nAsynchronous Block Node is known for it callbacks. These callbacks are nothing but the handlers that are registered with Event Demultiplexer. Because these handlers/callbacks are executed directly by event loop, we need to wrap anything and everything in the try..catch block to make sure the exception is not reaching the event loop.\nvar fs = require(\u0026#39;fs\u0026#39;); var path = \u0026#39;C:\\temp\\tempFile.txt\u0026#39;; try{ fs.stat(path, statCallback);\t} catch(e){ console.log(\u0026#34;Error::\u0026#34; + e.message); return; } function statCallback(err, stats){ try{ return stats.isFile(); } catch(e){ console.log(\u0026#34;Error::\u0026#34; + e.message); return false; } }  If you look at the example above, the we use two try..catch blocks one for the code around fs.stat() and another one is inside the callback function. This is required because, as we saw earlier the callback is executed directly by the event loop so any unhandled exceptions in the callback will reach event loop.\nThis will be annoying when we have nested callbacks as we need to wrap each callback in its own try..catch block.\nNode provides domain to make this process simple but it is deprecated at the moment in favour of better solution which is not available yet.\nUnhandled Exceptions When event loop encounters any unhandled exceptions, it emits uncaughtException. We can use this to log the error before let the application crash.\nprocess.on(\u0026#39;uncaughtException\u0026#39;, function(err){ console.log(err); });  You can find lot more information on this topic here, including event emitters - which is not covered in this post, in the official documentation.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/unit-testing-entity-framework-async-queries/",
	"title": "Unit Testing Entity Framework async Queries",
	"tags": ["Unit Testing", "entity framework"],
	"description": "",
	"content": " Introduction In my last article, we have seen how to unit test Entity Framework queries. Now, let\u0026rsquo;s look at how to unit test async queries. When using async tasks, if we don\u0026rsquo;t use it all the way then we are not using async tasks properly. For example, if you have async action method in your controller which queries database synchronously to send some data to the requester, then we are NOT using async properly as the thread is blocked during database operation. So, to take full advantage of async tasks, we have to use async tasks all the way wherever it is applicable. Fortunately, we get async query support starting from Entity Framework 6.\nAsync Queries Let\u0026rsquo;s take the query we have written last time and convert it into async.\npublic IQueryable\u0026lt;Movie\u0026gt; GetTopFiveMovies(int year) { return _moviesContext.Movies .Where(movie =\u0026gt; movie.Year == year) .OrderByDescending(movie =\u0026gt; movie.Rating) .Take(5); } The above method takes the top five movies for a given year synchronously. To change this to run asynchronously, we need to force the query execution using ToListAsync() extension method. The async version of the method would look like this\npublic async Task\u0026lt;List\u0026lt;Movie\u0026gt;\u0026gt; GetTopFiveMovies(int year) { return await _moviesContext.Movies .Where(movie =\u0026gt; movie.Year == year) .OrderByDescending(movie =\u0026gt; movie.Rating) .Take(5) .ToListAsync(); } Unit Testing In order to replace underlying data source with in-memory list, the list should implement IDbAsyncEnumerable and IQueryable. We can simply convert List into IQueryable using AsQueryable() extension method. But it is not straight forward to implement IDbAsyncEnumerable. The easiest way to acheive this is by wrapping our List data in a class which implements IDbAsyncEnumerable.\nThe class we create implementing IDbAsyncEnumerable should have GetAsyncEnumerator() method returning an enumerator implementing IDbAsyncEnumerator and Provider property should return a QueryProvider which implements IDbAsyncQueryProvider. So we need three fake/test-double classes as follows\npublic class FakeDbAsyncEnumerable\u0026lt;T\u0026gt; : EnumerableQuery\u0026lt;T\u0026gt;, IDbAsyncEnumerable\u0026lt;T\u0026gt;, IQueryable\u0026lt;T\u0026gt; { public FakeDbAsyncEnumerable(IEnumerable\u0026lt;T\u0026gt; enumerable) : base(enumerable) { } public FakeDbAsyncEnumerable(Expression expression) : base(expression) { } public IDbAsyncEnumerator\u0026lt;T\u0026gt; GetAsyncEnumerator() { return new FakeDbAsyncEnumerator\u0026lt;T\u0026gt;(this.AsEnumerable().GetEnumerator()); } IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() { return GetAsyncEnumerator(); } IQueryProvider IQueryable.Provider { get { return new FakeDbAsyncQueryProvider\u0026lt;T\u0026gt;(this); } } }public class FakeDbAsyncEnumerator\u0026lt;T\u0026gt; : IDbAsyncEnumerator\u0026lt;T\u0026gt; { private readonly IEnumerator\u0026lt;T\u0026gt; _localEnumerator; public FakeDbAsyncEnumerator(IEnumerator\u0026lt;T\u0026gt; localEnumerator) { _localEnumerator = localEnumerator; } public void Dispose() { _localEnumerator.Dispose(); } public Task\u0026lt;bool\u0026gt; MoveNextAsync(CancellationToken cancellationToken) { return Task.FromResult(_localEnumerator.MoveNext()); } public T Current { get { return _localEnumerator.Current; } } object IDbAsyncEnumerator.Current { get { return Current; } } }public class FakeDbAsyncQueryProvider\u0026lt;T\u0026gt; : IDbAsyncQueryProvider { private readonly IQueryProvider _localQueryProvider; internal FakeDbAsyncQueryProvider(IQueryProvider localQueryProvider) { _localQueryProvider = localQueryProvider; } public IQueryable CreateQuery(Expression expression) { return new FakeDbAsyncEnumerable\u0026lt;T\u0026gt;(expression); } public IQueryable\u0026lt;TElement\u0026gt; CreateQuery\u0026lt;TElement\u0026gt;(Expression expression) { return new FakeDbAsyncEnumerable\u0026lt;TElement\u0026gt;(expression); } public object Execute(Expression expression) { return _localQueryProvider.Execute(expression); } public TResult Execute\u0026lt;TResult\u0026gt;(Expression expression) { return _localQueryProvider.Execute\u0026lt;TResult\u0026gt;(expression); } public Task\u0026lt;object\u0026gt; ExecuteAsync(Expression expression, CancellationToken cancellationToken) { return Task.FromResult(Execute(expression)); } public Task\u0026lt;TResult\u0026gt; ExecuteAsync\u0026lt;TResult\u0026gt;(Expression expression, CancellationToken cancellationToken) { return Task.FromResult(Execute\u0026lt;TResult\u0026gt;(expression)); } } Now, we just need to create our data list and wrap it in FakeDbAsyncEnumerable instance and replace all the properties used by LINQ in DbSet instance with the one from FakeDbAsyncEnumerable. Note, because we are using async query, we need to setup create setup to replace GetAsyncEnumerator rather than GetEnumerator.\nThe completed unit test would look like this\n[TestMethod] public async Task GetTopFiveMoviesShouldReturnTopFiveMoviesSuccessfully() { // Fixture Setup  int year = 1999; // test movie list data  var movieList = new List\u0026lt;Movie\u0026gt; { new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =5, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =5, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =4, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =1, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =2, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =4, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =4, Year=1991 } }; // mock DbSet  var fakeAsynEnumerable = new FakeDbAsyncEnumerable\u0026lt;Movie\u0026gt;(movieList); var mockDbSetMovies = new Mock\u0026lt;IDbSet\u0026lt;Movie\u0026gt;\u0026gt;(); mockDbSetMovies.As\u0026lt;IQueryable\u0026gt;() .Setup(mock =\u0026gt; mock.Provider) .Returns(fakeAsynEnumerable.AsQueryable().Provider); mockDbSetMovies.As\u0026lt;IQueryable\u0026gt;() .Setup(mock =\u0026gt; mock.Expression) .Returns(fakeAsynEnumerable.AsQueryable().Expression); mockDbSetMovies.As\u0026lt;IQueryable\u0026gt;() .Setup(mock =\u0026gt; mock.ElementType) .Returns(fakeAsynEnumerable.AsQueryable().ElementType); mockDbSetMovies.As\u0026lt;IDbAsyncEnumerable\u0026gt;() .Setup(mock =\u0026gt; mock.GetAsyncEnumerator()) .Returns(((IDbAsyncEnumerable\u0026lt;Movie\u0026gt;)fakeAsynEnumerable).GetAsyncEnumerator()); // mock DbContext  var mockMovieContext = new Mock\u0026lt;IMoviesContext\u0026gt;(); mockMovieContext.Setup(mock =\u0026gt; mock.Movies).Returns(mockDbSetMovies.Object); var sut = new MovieFinder(mockMovieContext.Object); // Exercise System  var result = await sut.GetTopFiveMovies(year); // Verify Outcome  Assert.AreEqual(5, result.Count()); Assert.IsTrue(result.All(item =\u0026gt; item.Year == year)); // Fixture Teardown }"
},
{
	"uri": "https://kodebot.com/blog/2015/unit-testing-entity-framework-queries/",
	"title": "Unit Testing Entity Framework Queries",
	"tags": ["Unit Testing", "entity framework"],
	"description": "",
	"content": " Introduction When writing unit tests, we should test only one thing at once and isolate the system under test(SUT) from all the dependencies. We should follow the same approach for any LINQ queries you write to retrieve data from the underlying Database. But, I have seen many developers excluding the whole data access layer from unit testing. This is not right approach to follow IMHO. Many developers don\u0026rsquo;t bother unit testing data access layer because of the perceived effort and complexity involved in isolating the data access layer from underlying Database and ORM tools like Entity Framework. The truth is, it is very easy to test your queries without touching Entity Framework or Database.\nDataContext, DbSet and Finder Let\u0026rsquo;s assume that we have Movies database with Movie table and we want to write some queries to get top 5 movies released in year 1999. The default DbContext for this database would look like this\npublic class MoviesContext : DbContext { public MoviesContext() : base(\u0026#34;name=MoviesEntities\u0026#34;) { } public virtual DbSet\u0026lt;Movie\u0026gt; Movies { get; set; } } First, we need to make two changes to isolate this DbContext from unit testing   Replace DbSet with IDbSet   Extract interface from MoviesContext and use the interface wherever you want to use the DbContext  \nYou should not create instance of DbContext directly, instead use your faviroute DI Framework to inject it as dependency when requested.\n Updated DbContext class and interface should look like this\npublic class MoviesContext : DbContext, IMoviesContext { public MoviesContext() : base(\u0026#34;name=MoviesEntities\u0026#34;) { } public virtual IDbSet\u0026lt;Movie\u0026gt; Movies { get; set; } } public interface IMoviesContext { IDbSet\u0026lt;Movie\u0026gt; Movies { get; set; } } Now, let\u0026rsquo;s create a MovieFinder with a method GetTopFiveMovies to return top 5 movies for a given year as follows\npublic class MovieFinder { private readonly IMoviesContext _moviesContext; public MovieFinder(IMoviesContext moviesConext) { _moviesContext = moviesConext; } public IQueryable\u0026lt;Movie\u0026gt; GetTopFiveMovies(int year) { return _moviesContext.Movies .Where(movie =\u0026gt; movie.Year == year) .OrderByDescending(movie =\u0026gt; movie.Rating) .Take(5); } } Unit Testing To write unit tests for GetTopFiveMovies, we need to mock MoviesContext to provide testable implementation for Movies properties. For this example, I am going to use Moq but you can use any mocking framework you like. The completed unit test method would look like this\n[TestClass] public class MovieFinderTests {[TestMethod] public void GetTopFiveMoviesShouldReturnTopFiveMoviesSuccessfully() { // Fixture Setup  int year = 1999; // test movie list data  var movieList = new List\u0026lt;Movie\u0026gt; { new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =5, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =5, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =4, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =1, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =2, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =4, Year=1999 }, new Movie() {Id =1, Name=\u0026#34;Test1\u0026#34;, Rating =4, Year=1991 } }; // mock DbSet  var mockDbSetMovies = new Mock\u0026lt;IDbSet\u0026lt;Movie\u0026gt;\u0026gt;(); mockDbSetMovies.Setup(mock =\u0026gt; mock.Provider).Returns(movieList.AsQueryable().Provider); mockDbSetMovies.Setup(mock =\u0026gt; mock.Expression).Returns(movieList.AsQueryable().Expression); mockDbSetMovies.Setup(mock =\u0026gt; mock.ElementType).Returns(movieList.AsQueryable().ElementType); mockDbSetMovies.Setup(mock =\u0026gt; mock.GetEnumerator()).Returns(movieList.GetEnumerator()); // mock DbContext  var mockMovieContext = new Mock\u0026lt;IMoviesContext\u0026gt;(); mockMovieContext.Setup(mock =\u0026gt; mock.Movies).Returns(mockDbSetMovies.Object); var sut = new MovieFinder(mockMovieContext.Object); // Exercise System  var result = sut.GetTopFiveMovies(year); // Verify Outcome  Assert.AreEqual(5, result.Count()); Assert.IsTrue(result.All(item =\u0026gt; item.Year == year)); // Fixture Teardown  } } First, we are creating test movie data and then a mock DbSet\u0026lt;Movie\u0026gt; is created. The value of properties used by LINQ to support querying (Provider, Expression, ElementType) are replaced by the values from test data list movieList. Then, enumerator of DbSet is assigned to the enumerator of test data list movieList. Finally, the mock DbContext returns the mock DbSet\u0026lt;Movie\u0026gt; when Movie property is accessed.\nWith this setup, we are providing in-memory test data to execute our query without touching EF or database.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/vs-tac-cordova-version/",
	"title": "VS-TAC - Cordova version",
	"tags": ["Apps", "Apache Cordova"],
	"description": "",
	"content": "Visual Studio – Tools for Apache Cordova is a great addition to Visual Studio. It allows us to develop Apache Cordova applications while taking all the advantages of Visual Studio. I started using it with VS 2015 RC for one of the application I am developing using Ionic. In the application I was developing, I wanted to use one of the Cordova plugin from npm.\u0026nbsp; Cordova plugins are being migrated to npm and old plugins are also available in cordova’s old registry. If you want to use plugins from npm, your cordova cli version must be 5.0.0 or higher. VS 2015 RC currently uses version 4.3.0 which doesn’t support plugins from npm. So, you need to upgrade the version of cordova-cli Visual Studio uses.\nIt is very simple to upgrade the version of cordova tools Visual Studio uses. All you need to do is, open up the config.xml in designer and update the cordova cli version in platforms tab\n   If you prefer, you can directly update the version you want to use in taco.json.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/aspnet-mvc-5-jsonresult-with-http-status-code-400/",
	"title": "ASP.NET MVC 5 - JsonResult with Http Status Code 400",
	"tags": ["ASP.NET", "MVC"],
	"description": "",
	"content": "ASP.NET Web API 2 introduced several helper methods like Ok, NotFound, BadRequest, etc… . This allows us to write code which makes its intentions clear.\nIn recent times, I have been working in semi-single page application which uses ASP.NET MVC 5 and AngularJS. The application is designed in a way that, there is only one view per feature and each view is SPA. So, each ASP.NET MVC controller have only one GET action that returns the view and rest of the communication is using actions that returns JsonResult that can be used by client in AJAX style just like consuming Web API. With this design, I have to send JsonResult for everything, but, the Http Status Code has to be set appropriately so that the client can use them for any processing that it needs to do based on the Status Code.\nFirst, I set the status code directly in Response in the action method and then returned JsonResult like this:\nResponse.StatusCode = 400; return Json(data); Soon, I noticed doing this in too many places and I though this is obscure. To address this, I created a custom result type called BadRequest and moved this code into that class and I used the BadRequest class in my action methods. This made the code more intention revealing and DRY.\nHere is the code for BadRequest ActionResult:\npublic class BadRequest : JsonResult { public BadRequest() { } public BadRequest(string message) { this.Data = message; } public BadRequest(object data) { this.Data = data; } public override void ExecuteResult(ControllerContext context) { context.RequestContext.HttpContext.Response.StatusCode = 400; base.ExecuteResult(context); } } Here is how you use it:\n[HttpPost] public ActionResult Add(Author author, HttpPostedFileBase photoContent) { if (author == null) { return new BadRequest(\u0026#34;Invalid author details.\u0026#34;); } . . . } You can create similar classes for all other type of results that you would want to send to client. As always, please let me know if there is a better way for doing this.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/angularjs-1x-validation-on-file-input-type/",
	"title": "AngularJS 1.x - Validation on File Input type",
	"tags": ["JavaScript", "AngularJS"],
	"description": "",
	"content": "Introduction You might already known that AngularJS 1.x doesn’t support model binding for File Input type at the moment. This means, implementing any validation on File Input type is not straight forward as validation entirely depends on model binding.\nI have come across a requirement where, I need to create a form with ‘required’ validation on File Input type and I also need to display bootstrap form feedback. There are number of great solutions out there to make file upload with angular easier but none of them provide easier way to enforce validation.\nWhat I did? First I have made file input type to look like a button as explained here, and then made it as an add-on to a normal disabled text input as follows\n\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;col-md-2 control-label\u0026#34; for=\u0026#34;photoUrl\u0026#34;\u0026gt;Photo\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;btn btn-primary btn-file input-group-addon\u0026#34;\u0026gt; Browse \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;photoUrlSelector\u0026#34; name=\u0026#34;photoUrlSelector\u0026#34; accept=\u0026#34;image/*\u0026#34; \u0026gt; \u0026lt;/span\u0026gt; \u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;photoUrl\u0026#34; name=\u0026#34;photoUrl\u0026#34; data-ng-disabled=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; The output looks like this:\n   Next, I have used ng-file-upload to make file selection update the model and made $touched property of the form field true on mouse click. So,\n\u0026lt;span class=\u0026#34;btn btn-primary btn-file input-group-addon\u0026#34;\u0026gt; Browse \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;photoUrlSelector\u0026#34; name=\u0026#34;photoUrlSelector\u0026#34; accept=\u0026#34;image/*\u0026#34;\u0026gt; \u0026lt;/span\u0026gt; is changed as follows\n\u0026lt;span class=\u0026quot;btn btn-primary btn-file input-group-addon\u0026quot;\u0026gt; Browse \u0026lt;input type=\u0026quot;file\u0026quot; id=\u0026quot;photoUrlSelector\u0026quot; name=\u0026quot;photoUrlSelector\u0026quot; ngf-select ng-model=\u0026quot;vm.author.photoUrl\u0026quot; accept=\u0026quot;image/*\u0026quot; data-ng-click=\u0026quot;addAuthorForm.photoUrl.$touched=true\u0026quot;\u0026gt; \u0026lt;/span\u0026gt;  Then, the first file name is set as model for the text input type as follows, so it shows the selected file\n\u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;photoUrl\u0026#34; name=\u0026#34;photoUrl\u0026#34; data-ng-model=\u0026#34;vm.author.photoUrl[0].name\u0026#34; data-ng-required=\u0026#34;true\u0026#34; data-ng-disabled=\u0026#34;true\u0026#34;\u0026gt; as you can see, the input field is also decorated with ng-required directive to enforce required field validation. Now, until the File Input type is selected, the $touched property will be false and it will become true when user touches it. The user selected file object will be available in the model we used in the File Input type and selected file name will be shown in the text input type.\nThe File object can be used in your controller to send file to the back end or what ever you want to do with it. After adding bootstrap feedback, the form group looks like this\n\u0026lt;div class=\u0026#34;form-group has-feedback\u0026#34; data-ng-class=\u0026#34;{\u0026#39;has-error\u0026#39;:addAuthorForm.photoUrl.$invalid \u0026amp;\u0026amp; addAuthorForm.photoUrl.$touched, \u0026#39;has-success\u0026#39;:addAuthorForm.photoUrl.$valid \u0026amp;\u0026amp; addAuthorForm.photoUrl.$touched}\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;col-md-2 control-label\u0026#34; for=\u0026#34;photoUrl\u0026#34;\u0026gt;Photo\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;btn btn-primary btn-file input-group-addon\u0026#34;\u0026gt; Browse \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;photoUrlSelector\u0026#34; name=\u0026#34;photoUrlSelector\u0026#34; ngf-select ng-model=\u0026#34;vm.author.photoUrl\u0026#34; accept=\u0026#34;image/*\u0026#34; data-ng-click=\u0026#34;addAuthorForm.photoUrl.$touched=true\u0026#34;\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;photoUrl\u0026#34; name=\u0026#34;photoUrl\u0026#34; data-ng-model=\u0026#34;vm.author.photoUrl[0].name\u0026#34; data-ng-required=\u0026#34;true\u0026#34; data-ng-disabled=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;span data-ng-if=\u0026#34;addAuthorForm.photoUrl.$invalid \u0026amp;\u0026amp; addAuthorForm.photoUrl.$touched\u0026#34; class=\u0026#34;glyphicon glyphicon-remove form-control-feedback\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span data-ng-if=\u0026#34;addAuthorForm.photoUrl.$valid \u0026amp;\u0026amp; addAuthorForm.photoUrl.$touched\u0026#34; class=\u0026#34;glyphicon glyphicon-ok form-control-feedback\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;span class=\u0026#34;help-block\u0026#34;\u0026gt; \u0026lt;span data-ng-show=\u0026#34;addAuthorForm.photoUrl.$error.required \u0026amp;amp;\u0026amp;amp; addAuthorForm.photoUrl.$touched\u0026#34;\u0026gt;The Photo is required field.\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; Output with validation error looks like this\n   and success looks like this\n   Conclusion This is not perfect but it does the job. We could also create a directive to hide away all the messy details but that is not necessary until you need to use this in many places in your application. Please let me know if you know a better way to achieve this.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/angular-1x-unit-testing-a-function-that-returns-promise/",
	"title": "Angular 1.x - Unit Testing a function that returns Promise",
	"tags": ["AngularJS", "JavaScript", "Unit Testing"],
	"description": "",
	"content": "I wrote this post few months back which show how we can mock a function that returns Promise. In this post, we will see how to test a function that returns Promise.\nWe will use the following simple controller as our SUT\nvar app = angular.module(\u0026#34;app\u0026#34;); app.controller(\u0026#34;studentController\u0026#34;, function($q, studentDataService){ var vm = this; vm.students = undefined; activate(); function activate (){ vm.students = getAllStudents(); } function getAllStudents(){ return studentDataService .getAll(); } });  This simple controller has getAllStudents() which returns a promise. The activate method calls getAllStudents() and assigns the returned promise to vm.students. In angular, you can directly bind promise, so, this is perfectly valid.\nWhen it comes to testing, we would like to test what data this promise returns when it is resolved. And, this is how we do it,\nit(\u0026#34;should get students on activation\u0026#34;, function(done){ // Fixture Setup  // Exercise Systcode  var sut = $controller(\u0026#34;studentController\u0026#34;); // Verify Outcome  sut.students.then(function(data){ expect(data).toBeDefined(); done(); }); $rootScope.$apply(); // Fixture Teardown });  In this test, we are considering sut.students as promise and the assert is written inside the then() method. Because assert is written inside the then()method, we have access to the data the promise returns when resolved. This means, we can directly test the data returned by the promise. In this example, I have simply verified whether the data is defined or not, but, it can be anything.\nThis test method also uses jasmine’s asynchronous spec and done()callback is called inside the then() method after the assert statcodeent. This helps to complete the test as soon as our assert ran and it also time out the test if the then() is not defined or not called for some reason. Isn’t this simple and effective?\n"
},
{
	"uri": "https://kodebot.com/blog/2015/typescript-accessing-object-with-null-key/",
	"title": "TypeScript - Accessing object with null key",
	"tags": ["TypeScript"],
	"description": "",
	"content": "Objects in JavaScript is just a key value pair and key is usually string and value can be anything. The following is an example of JavaScript object literal\nvar car = { wheels : 3, colour: \u0026#39;red\u0026#39;, drive: function(){ ... } }  The key in the object can be null. The default route in AngularJS is associated with null key, for example.\nWe can access the value associated with the null key in JavaScript quite easily like this:\nroutes[null].redirectTo  If you do the same in TypeScript, you will get the following error\nAn index expression argument must be of type string, number, symbol, or any.\nSo, how do we make it work? It turns out that rather than using null key word, you can use a variable which is null. The following code is valid in TypeScript.\nvar nullRef: any = null; routes[nullRef].redirectTo I spent long time to get it working so posting this here for future reference.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/aspnet-mvc-5-hosting-for-integration-e2e-testing/",
	"title": "ASP.NET MVC 5 Hosting for Integration / E2E Testing",
	"tags": ["ASP.NET", "MVC"],
	"description": "",
	"content": "Introduction When we want to do proper Integration or End to End testing of Web API, we can choose any process as host for Web API 2 or higher. This is possible because Web API supports Owin/Katana, which means, it doesn\u0026rsquo;t have any direct dependency on IIS. On the other hand MVC 5 doesn\u0026rsquo;t have support for Owin/Katana due to the fact that ASP.NET pipeline is depending on IIS. So this leaves us with only one option to host MVC 5, which is IIS, even for integration/e2e testing.\nHow do we do it? When we do integration/e2e testing, for most scenarios we would want the application in clean state and at the same time we want our tests to run fast. For many reasons, the simplest option to achieve this is to use IIS Express rather than standard version.\nWe can write an utility class that will start the IIS Express with the the application we are testing for each test and close it at the end of the test. This many not be super fast but fast enough to use.\nHere is the utility class I created to start and stop IIS Express:\npublic static class ApplicationUtilities { private static Process _webHostProcess; private const string WEB_APP_NAME = \u0026#34;BookShop.Web\u0026#34;; private const int WEB_APP_PORT = 12345; public static void StartApplication() { var webHostStartInfo = GetProcessStartInfo(); _webHostProcess = Process.Start(webHostStartInfo); _webHostProcess.TieLifecycleToParentProcess(); } public static void StopApplication() { if (_webHostProcess == null) return; if (!_webHostProcess.HasExited) _webHostProcess.Kill(); _webHostProcess.Dispose(); } public static string ApplicationBaseUrl { get { return string.Format(\u0026#34;http://localhost:{0}\u0026#34;, WEB_APP_PORT); } } public static string GetFullUrl(string relativePath) { return string.Format(\u0026#34;{0}{1}\u0026#34;, ApplicationUtilities.ApplicationBaseUrl, relativePath); } private static string GetSolutionFolderPath() { var directory = new DirectoryInfo(Environment.CurrentDirectory); while (directory.GetFiles(\u0026#34;*.sln\u0026#34;).Length == 0) { directory = directory.Parent; } return directory.FullName; } private static ProcessStartInfo GetProcessStartInfo() { var key = Environment.Is64BitOperatingSystem ? \u0026#34;programfiles(x86)\u0026#34; : \u0026#34;programfiles\u0026#34;; var programfiles = Environment.GetEnvironmentVariable(key); var startInfo = new ProcessStartInfo { WindowStyle = ProcessWindowStyle.Normal, ErrorDialog = true, LoadUserProfile = true, CreateNoWindow = false, UseShellExecute = false, Arguments = String.Format(\u0026#34;/path:\\\u0026#34;{0}\\\u0026#34; /port:{1}\u0026#34;, Path.Combine(GetSolutionFolderPath(), @\u0026#34;src\\\u0026#34; + WEB_APP_NAME), WEB_APP_PORT), FileName = string.Format(\u0026#34;{0}\\\\IIS Express\\\\iisexpress.exe\u0026#34;, programfiles) }; // Add any environment variables  // startInfo.EnvironmentVariables.Add(key, value);  return startInfo; } } This code is self explanatory so, I am not going to try to explain this. One thing to note though is, it uses third party package(AllForOne) to kill child processes when parent is not running anymore.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/how-to-mock-automapper-in-unit-tests/",
	"title": "How to isolate AutoMapper in Unit Tests?",
	"tags": ["Unit Testing", "Library"],
	"description": "",
	"content": "Introduction\nWhen it comes to Unit testing, the rule is to isolate\u0026nbsp;all the dependencies and focus only on the unit of code you are testing. I have been silently ignoring this for AutoMapper until I found a proper way to isolate and replace the behavior of mapping.\nWhen I was looking for a proper way to do this, I come across many posts but none of them were having full working example without any additional layer between the function/class that wants to use AutoMapper and AutoMapper itself.\nIMappingEngine\nAutoMapper comes with a static class Mapper which has almost all the methods we need to work with AutoMapper. I we want to create a new mapping, we can use Mapper.CreateMap() method (we can also use AutoMapper Profile instances) and if we want to perform mapping between pre-configured objects we can use Mapper.Map() method.\nThe Mapper class exposes a property Engine which holds all the mapping configurations. This property is of type IMappingEngine.\nWhen we invoke Map method on Mapper class, it in-turn calls Map method of Engine property.\nSo, all we need to do to isolate and control the behavior of mapping in our unit test is to replace the Engine property with our own implementation.\nBut, how?\nThe Engine is static property in Mapper class which is also static. We know very well that it is nearly impossible to replace the implementation of static members without using some fancy tools or test patterns.\nFortunately, the type of Engine property is interface IMappingEngine. This means, we can declare IMappingEngine as a dependency of SUT and ask DI framework to provide it with the instance, in this case Mapper.Engine.\nHere is how it looks like if you use Ninject\nkernel.Bind\u0026lt;IMappingEngine\u0026gt;().ToConstant(Mapper.Engine); And with ASP.NET 5 built-in DI\nservices.AddInstance\u0026lt;IMappingEngine\u0026gt;(Mapper.Engine); In the unit test method, you need to create Test Double which implements IMappingEngine and create SUT with Test Double as input for dependency. The easiest way to create Test Double is to create it as a Mock using your favourite mocking framework.\nHere is an example using Moq,\nvar mockMapper = new Mock\u0026lt;IMappingEngine\u0026gt;(); mockMapper.Setup(mock =\u0026gt; mock.Map\u0026lt;TargetType\u0026gt;(It.IsAny\u0026lt;SourceType\u0026gt;())).Returns(targetInstance); Full example\npublic class User { public int Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } } public class UserDto { public int Id { get; set; } public string FirstName { get; set; } } public class Sut { private readonly IMappingEngine _mapper; public Sut(IMappingEngine mapper) { _mapper = mapper; } public User Run(UserDto dto) { return _mapper.Map\u0026lt;User\u0026gt;(dto); } } public class SutTests {[Fact] public void RunShouldReturnUserCorrectly() { // arrange  var stubUser = new User(); var stubUserDto = new UserDto(); var mockMapper = new Mock\u0026lt;IMappingEngine\u0026gt;(); mockMapper.Setup(mock =\u0026gt; mock.Map\u0026lt;User\u0026gt;(It.Is\u0026lt;UserDto\u0026gt;(stubUserDto))).Returns(stubUser); var target = new Sut(mockMapper.Object); // act  var actual = target.Run(stubUserDto); // assert  Assert.AreEquals(stubUser, actual); } }"
},
{
	"uri": "https://kodebot.com/blog/2015/asp-net-5-tag-helpers-the-html-way/",
	"title": "ASP.NET 5 - Tag Helpers, the HTML way",
	"tags": ["ASP.NET", "MVC"],
	"description": "",
	"content": "Introduction Tag Helper is not a new concept in ASP.NET but they way we use Tag Helpers in razor view is different. In the previous versions of ASP.NET, if we want to use HTML tag helper, we will be switching from HTML\u0026rsquo;s native declarative style to imperative style of C#.\nWe loose the tooling support we get when editing HTML document for the most part. For example, the following code creates a label\n// Old style tag helpers @Html.LabelFor(Model =\u0026gt; Model.Name, \u0026#34;User Name\u0026#34;, new { @class = \u0026#34;control-label\u0026#34; }); In this example, we are specifying that this label is created for Name property of the Model using lambda expression, then label text as second string parameter and finally we are creating an anonymous type for all the html attributes we want to attach to the tag. When we create the label this way we won't get any support from Visual Studio that we get when authoring html document, especially, for the last parameter, because Visual Studio won't know whether we are creating HTML attributes or something else.\nDeclarative Style In ASP.NET 5, we create the same label like this,\n// Declarative style \u0026lt;label asp-for=\u0026#34;Name\u0026#34; class=\u0026#34;control-label\u0026#34;\u0026gt;User Name\u0026lt;/label\u0026gt; Note, we have a new attribute called asp-for, this replaces the lambda expression we used in the previous example and the rest is self explanatory. One of the main advantage of this style is that we get full intellisense and other supports from Visual Studio that we usually get while authoring html document.\nBuilt-in Tag Helpers ASP.NET 5 has many built-in tag helpers and they are in Microsoft.AspNet.Mvc.TagHelpers assembly. We can use the built-in tag helpers by importing them into the scope using a new directive @addTagHelper like this,\n// add tag helpers @addTagHelper \u0026#34;*, Microsoft.AspNet.Mvc.TagHelpers\u0026#34; We specify type name(s) followed by assembly name separated by comma as a string. * specifies all the types in the assembly. Custom Tag Helpers ASP.NET 5 provides a very simple interface ITagHelper to create custom tag helpers. The interface has only two members,\n// ITagHelper int Order { get; } Task ProcessAsync(TagHelperContext context, TagHelperOutput output); The ProcessAsyc method takes two parameters, the first one provides options to get all the information about the tag in question and the helper itself and the output parameter represents the output that will be rendered. We can manipulate output to influence the content rendered.\nThe Order property indicates the order in which the ProcessAsync will be executed on the target tag where there are more then one tag helpers target the same tag. The Tag helper process will be applied from lower order to higher order.\nWe have a class TagHelper which implements the ITagHelper, so if we want to create new tag helper, we just need to inherit our class from TagHelper and override Order and ProcessAsync method. Note, the convention is to a tag helper with 'TagHelper' suffix.\nHere is an example of custom tag helper which creates bootstrap panel\n// Custom tag helper example [TargetElement(\u0026#34;div\u0026#34;, Attributes = \u0026#34;panel-title\u0026#34;)] [TargetElement(\u0026#34;div\u0026#34;, Attributes = \u0026#34;panel-style\u0026#34;)] public class PanelTagHelper : TagHelper {[HtmlAttributeName(\u0026#34;panel-title\u0026#34;)] public string Title { get; set; }[HtmlAttributeName(\u0026#34;panel-type\u0026#34;)] public HtmlPanelType PanelType { get; set; } public override void Process(TagHelperContext context, TagHelperOutput output) { //\u0026lt;div class=\u0026#34;panel panel-default\u0026#34;\u0026gt;  // \u0026lt;div class=\u0026#34;panel-heading\u0026#34;\u0026gt;  // \u0026lt;h3 class=\u0026#34;panel-title\u0026#34;\u0026gt;Panel title\u0026lt;/h3\u0026gt;  // \u0026lt;/div\u0026gt;  // \u0026lt;div class=\u0026#34;panel-body\u0026#34;\u0026gt;  // Panel content  // \u0026lt;/div\u0026gt;  //\u0026lt;/div\u0026gt;  // header content  var panelHeadingContent = new TagBuilder(\u0026#34;h3\u0026#34;); panelHeadingContent.SetInnerText(Title); // header  var panelHeading = new TagBuilder(\u0026#34;div\u0026#34;); panelHeading.AddCssClass(\u0026#34;panel-heading\u0026#34;); panelHeading.InnerHtml = panelHeadingContent.ToHtmlString(TagRenderMode.Normal).ToString(); // body  var panelBody = new TagBuilder(\u0026#34;div\u0026#34;); panelBody.AddCssClass(\u0026#34;panel-body\u0026#34;); panelBody.InnerHtml = context.GetChildContentAsync().Result.GetContent(); // panel  var panel = new TagBuilder(\u0026#34;div\u0026#34;); panel.AddCssClass(\u0026#34;panel\u0026#34;); AddPanelTypeStyle(panel, PanelType); // replace the custom tag with the panel just built  output.MergeAttributes(panel); var content = panelHeading.ToHtmlString(TagRenderMode.Normal).ToString(); content += panelBody.ToHtmlString(TagRenderMode.Normal).ToString(); output.Content.SetContent(content); base.Process(context, output); } private void AddPanelTypeStyle(TagBuilder panel, HtmlPanelType type) { switch (type) { case HtmlPanelType.Default: panel.AddCssClass(\u0026#34;panel-default\u0026#34;); break; case HtmlPanelType.Primary: panel.AddCssClass(\u0026#34;panel-primary\u0026#34;); break; case HtmlPanelType.Info: panel.AddCssClass(\u0026#34;panel-info\u0026#34;); break; case HtmlPanelType.Success: panel.AddCssClass(\u0026#34;panel-success\u0026#34;); break; case HtmlPanelType.Warning: panel.AddCssClass(\u0026#34;panel-warning\u0026#34;); break; case HtmlPanelType.Danger: panel.AddCssClass(\u0026#34;panel-danger\u0026#34;); break; default: throw new InvalidOperationException(\u0026#34;The panel type specified is not specified or invalid\u0026#34;); } } } \nThe TargetElement attribute is used to specify the target element to which this tag helper applies. We can specify tag name and optional attributes. We can also specify more than one TargetElement attribute and they work in logical OR basis.\nThe HtmlAttributeName attribute is used to bind an attribute of a tag with property in the tag helper. If you don't want the property in tag helper to represent any html attributes then you decorate the property with HtmlAttributeNotBoundAttribute to indicate that.\nASP.NET 5 is in beta at the time this post is published and the final version may be different than the beta version.\n "
},
{
	"uri": "https://kodebot.com/blog/2015/asp-net-5-environment-specific-pipeline-configuration/",
	"title": "ASP.NET 5 - Environment specific pipeline configuration",
	"tags": ["ASP.NET", "MVC"],
	"description": "",
	"content": "Introduction In ASP.NET 5, we configure and add middlewares (aka pipelines) using Startup class. The convention is similar to Owin/Katana but not the same.\nThe Configuration method in Owin/Katana Startup class is replaced by Configure method and the parameter type is IApplicationBuilder rather than IAppBuilder and how we create and add\u0026nbsp;middleware is also different to some extend.\u0026nbsp;\nASP.NET 5 Startup class allows us to add and configure services using ConfigureService method, this is not available in Owin/Katana Startup class. The services we add using this method is added to the DependencyInjection container which comes with ASP.NET 5 out of the box.\nEnvironment awareness The Startup class can access the hosting environment details using IHostingEnvironment.\u0026nbsp;When we specify IHostingEnvironment as a dependency by making it as a parameter in Startup constructor, ConfigureServices or Configure method, the dnx will populate it for us and DependencyInjection framework will inject the instance.\nThe injected instance has EnvironmentName property, the value of this property is set from an environment variable ASPNET_ENV. If this variable is not found then the value is set as Development.\nThe instance also has a handy method IsEnvironment to find out whether the code is running on a specific environment or not. We can use this to do things differently based on the environment where the code is running. For example, we can read different config files as shown below\n// Example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.IsEnvironment(\u0026#34;Production\u0026#34;)) { // read prod config  } else { // read dev config  } } . . . } If we want to add/configure middlewares differently based on the environment then we can use IsEnvironment method just like how it is used in ConfigureServices method or we can use environment specific Configure methods.\u0026nbsp;\nThe environment specific Configure method only support Development, Staging and Production environment names and the method names have to be ConfigureDevelopment, ConfigureStaging and ConfigureProduction respectively for this to work. Here is an example of how we can use this,\n// Full example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.IsEnvironment(\u0026#34;Production\u0026#34;)) { // read prod config  } else if (_env.IsEnvironment(\u0026#34;Staging\u0026#34;)) { // read staging config  } else { // read dev config  } } public void ConfigureDevelopment(IApplicationBuilder builder, IHostingEnvironment env) { // Development configuration  Configure(builder); } public void ConfigureStaging(IApplicationBuilder builder) { // Staging configuration  Configure(builder); } public void ConfigureProduction(IApplicationBuilder builder) { // Production configuration  Configure(builder); } public void Configure(IApplicationBuilder builder) { // Common  } } This allows us to keep environment specific configurations/pipelines in a better\u0026nbsp;way.\u0026nbsp;\n"
},
{
	"uri": "https://kodebot.com/blog/2015/owin-katana-core-middleware-patterns/",
	"title": "Owin - Katana core middleware patterns",
	"tags": ["ASP.NET", "MVC"],
	"description": "",
	"content": "Introduction Katana supports 4 different convention based patterns for adding middlewares in its lowest level. They are,\n Delegate Pattern Instance Pattern Generator/Nested Delegate Pattern Constructor Type or Type Pattern All the other formats/patterns supported through IAppBuilder\u0026rsquo;s extension methods are implemented using one of these 4 patterns under the hood.\nI couldn\u0026rsquo;t find any examples in the web which show how to use these patterns, so I am creating it for my future reference.\nDelegate Pattern Delegate pattern accepts the following delegate as a first parameter for the Use method of IAppBuilder and any number of additional parameter of any type\n// Delegate Pattern Func\u0026lt;AppFunc, AppFunc\u0026gt; where AppFunc is Func\u0026lt;IDictionary\u0026lt;string, object\u0026gt;, Task\u0026gt;\u0026gt; The delegate takes AppFunc as parameter and returns AppFunc. The parameter represents the next middleware in the pipeline and return value represents the implementation of the middleware we are adding. // Delegate Pattern Implementation public void Configuration(IAppBuilder builder) { builder.Use(new Func\u0026lt;AppFunc, AppFunc\u0026gt;(next =\u0026gt; async env =\u0026gt; { Console.WriteLine(\u0026#34;From Delegate Middleware - Start\u0026#34;); await next(env); Console.WriteLine(\u0026#34;From Delegate Middleware - End\u0026#34;); })); } In the example above, the middleware we are adding prints something in the console, calls next middleware in the pipeline and once it is complete, it continues by executing rest of the code in the middleware we are adding.\nThe following example shows the delegate pattern with additional parameters\n// Delegate Pattern with additional parameters public void Configuration(IAppBuilder builder) { builder.Use(new Func\u0026lt;AppFunc, string, AppFunc\u0026gt;((next, param) =\u0026gt; async (env) =\u0026gt; { Console.WriteLine(\u0026#34;From Delegate Middleware with param- Start\u0026#34;); Console.WriteLine(\u0026#34;Paramater value : {0}\u0026#34;, param); await next(env); Console.WriteLine(\u0026#34;From Delegate Middleware with param- End\u0026#34;); }), \u0026#34;additional param\u0026#34;); } Instance Pattern To use this pattern to add middlewares, we need newable types with the following two methods\n// Instance Pattern method signatures public void Initialize(AppFunc next, params object[] args); public Task Invoke(IDictionary\u0026lt;string, object\u0026gt; environment); Here is an example of middleware created using instance pattern\n// Instance Pattern with parameter public void Configuration(IAppBuilder builder) { builder.Use(new InstanceMiddlewareWithParam(), \u0026#34;instance param value\u0026#34;); } public class InstanceMiddlewareWithParam { private AppFunc _next; private string _param; public void Initialize(AppFunc next, string param) { _next = next; _param = param; } public async Task Invoke(IDictionary\u0026lt;string, object\u0026gt; environment) { Console.WriteLine(\u0026#34;From Instance Middleware with param - Start\u0026#34;); Console.WriteLine(\u0026#34;Parameter value: {0}\u0026#34;, _param); await _next(environment); Console.WriteLine(\u0026#34;From Instance Middleware with param - Start\u0026#34;); } } Generator/Nested Delegate Pattern To use this pattern to create middlewares, we need a newable type with the following method\n// Generator / Nested Delegate pattern public AppFunc Invoke(AppFunc next, params object[] args); This method takes next middleware in the pipeline and any number of additional arguments and returns the implementation of current middleware. Here is an example\n// Middleware using Generator / Nested Delegate pattern  public void Configuration(IAppBuilder builder) { builder.Use(new GeneratorMiddlewareWithParam(), \u0026#34;generator param value\u0026#34;); } public class InstanceMiddlewareWithParam { private AppFunc _next; private string _param; public void Initialize(AppFunc next, string param) { _next = next; _param = param; } public async Task Invoke(IDictionary\u0026lt;string, object\u0026gt; environment) { Console.WriteLine(\u0026#34;From Instance Middleware with param - Start\u0026#34;); Console.WriteLine(\u0026#34;Parameter value: {0}\u0026#34;, _param); await _next(environment); Console.WriteLine(\u0026#34;From Instance Middleware with param - Start\u0026#34;); } } Constructor Type / Type Pattern A type with the following constructor and method can be added a middleware using this pattern\n// Constructor Type / Type pattern  public Ctor(AppFunc next, params object[] args); public Task Invoke(IDictionary\u0026lt;string, object\u0026gt; env); Here is an example\n// Middleware using Constructor Type / Type pattern  public void Configuration(IAppBuilder builder) { builder.Use(typeof(ConstructorTypeMiddlewareWithParam), \u0026#34;type param value\u0026#34;); } public class ConstructorTypeMiddlewareWithParam { private readonly AppFunc _next; private readonly string _param; public ConstructorTypeMiddlewareWithParam(AppFunc next, string param) { _next = next; _param = param; } public async Task Invoke(IDictionary\u0026lt;string, object\u0026gt; env) { Console.WriteLine(\u0026#34;From Constructor Type Middleware - Start\u0026#34;); Console.WriteLine(\u0026#34;Parameter value: {0}\u0026#34;, _param); await _next(env); Console.WriteLine(\u0026#34;From Constructor Type Middleware - End\u0026#34;); } }"
},
{
	"uri": "https://kodebot.com/blog/2015/typescript-this-reference-in-angularjs-event-handler/",
	"title": "TypeScript - &#39;this&#39; reference in AngularJS event handler",
	"tags": ["TypeScript", "AngularJS"],
	"description": "",
	"content": "Let's have a look at how AngularJS 1.x controller is usually created in TypeScript before we go into details of how AngularJS event handler and how 'this' works in the AngularJS event handler context. TypeScript encourages to type anything and everything to take full advantages of the type system and tool supports we get when working with any strongly typed language.\nSo, when using TypeScript with AngularJS 1.x, class is usually created to represent the implementation of the controllers. Here is an example of how this would look like\n// Controller using class module App.Home { interface IHomeViewModel { title: string; } class HomeController implements IHomeViewModel { title: string = \u0026#34;Welcome!!!\u0026#34;; static $inject = [\u0026#34;$location\u0026#34;, \u0026#34;$rootScope\u0026#34;] constructor( private $location: ng.ILocationService, private $rootScope: ng.IRootScopeService) { } } angular.module(\u0026#34;app\u0026#34;) .controller(\u0026#34;homeController\u0026#34;, HomeController); } In this example, an interface called IHomeViewModel is created to represent the public members of the controller and a class HomeController is created which implements the interface.\nDependencies are injected using static $inject member and injected dependencies are declared as private members.\nFinally, the controller is created using Angular module's controller method which takes name of the controller and constructor function (in this case, class) which represents the controller's implementation as parameters. In AngularJS 1.x, events are one of the communication enablers among components. AngularJS itself raises various built in events and allows application to raise any custom events as well.\nWe can add handlers to these events to do something useful when the events are raised.\nHere is an example of how we will add handler to Angular\u0026rsquo;s $routeChangeStart event which is raised when route change is initiated\n// Event handlers private hookEventHandlers():void { this.$rootScope.$on(\u0026#34;$routeChangeStart\u0026#34;, this.onRouteChangeStart); } private onRouteChangeStart():void { console.log(this.title); } The hookEventHandlers method is called from the constructor of the controller which adds handler to $routeChangeStart event and the handler simply logs title member of the class into console.\nWhen this method is run, you would expect it to show \u0026lsquo;Welcome!!!\u0026rsquo; in the console but it shows undefined instead.\nThis is happening because the caller of the method is NOT the instance of the class where it is defined, so this doesn\u0026rsquo;t have a member named title. Fortunately, it is very easy to get around this problem in TypeScript using arrow function. Here is an example\n// Event handler using arrow function private hookEventHandlers(): void { this.$rootScope.$on(\u0026#34;$routeChangeStart\u0026#34;,() =\u0026gt; { this.onRouteChangeStart.call(this); }); } private onRouteChangeStart(): void { console.log(this.title); } Now, when this function is executed, 'Welcome!!!' is printed in the console window as expected.\nIn this example, we have changed our event handler to be arrow function and the arrow function invokes onRouteChangeStart using call function and passing current instance of the class where it is defined as this reference.\nBut, how does arrow function has correct reference of this? When arrow function is created, this is lexically bound to the location where it is created. In this case, arrow function is created inside the member of a class where this represents the current instance of the class. So this reference inside the arrow function also represents the current instance of the class where it is created. That\u0026rsquo;s it :) Full code example here,\n// Full code example module App.Home { interface IHomeViewModel { title: string; } class HomeController implements IHomeViewModel { title: string = \u0026#34;Welcome!!!\u0026#34;; static $inject = [\u0026#34;$location\u0026#34;, \u0026#34;$rootScope\u0026#34;] constructor( private $location: ng.ILocationService, private $rootScope: ng.IRootScopeService) { this.hookEventHandlers(); } private hookEventHandlers(): void { this.$rootScope.$on(\u0026#34;$routeChangeStart\u0026#34;,() =\u0026gt;; { this.onRouteChangeStart.call(this); }); } private onRouteChangeStart(): void { console.log(this.title); } } angular.module(\u0026#34;app\u0026#34;) .controller(\u0026#34;homeController\u0026#34;, HomeController); }"
},
{
	"uri": "https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/",
	"title": "TypeScript build automation in ASP.NET 5 (MVC6) using Gulp",
	"tags": ["ASP.NET", "MVC", "TypeScript"],
	"description": "",
	"content": "Introduction ASP.NET 5 introduces some major changes in terms of how we develop applications like no need for project and file association, wwwroot folder, first class support for JSON config files, .NET framework choice, separation of client side and server side package management and more. You can read more on this here.\nAbove all of these, it supports JavaScript build automation by providing support for the nodejs\u0026nbsp;platform.\u0026nbsp;\nVisual Studio 2015 has in-built task runner to run grunt or gulp tasks, this is great because we don\u0026rsquo;t have to leave Visual Studio to run these tasks.\u0026nbsp;\nWhen you create a new ASP.NET 5 Starter Web project, you will get predefined gruntfile to automate most of the frequent tasks you may want to do. I personally prefer Gulp over Grunt.\nNow, we will see how we can configure TypeScript build system in ASP.NET 5 MVC 6 project using Gulp.\nGulp package and plugins First, we will see all the packages we need to setup TypeScript build system\n gulp\u0026nbsp;- JavaScript build automation tool gulp-typescript\u0026nbsp;- TypeScript compiler with incremental compile support gulp-tslint\u0026nbsp;- TypeScript lint tool gulp-tslint-stylish\u0026nbsp;- Formats TypeScript lint errors nicely gulp-sourcemaps\u0026nbsp;- Creates sourcemaps to enable debugging in TypeScript gulp-inject\u0026nbsp;- Injects JavaScript and CSS into HTML file gulp-rimraf\u0026nbsp;- Deletes folders and files  Installation All these are node modules and we need to install these as dev dependencies. I assume you have node installed in your machine, if not, go to nodejs\u0026nbsp;website and follow the instructions.\nOpen command prompt and navigate to your project folder the follow the steps below to install all the packages you need\n1. Run the following command and answer all the questions\n# creates package.json npm init This will create package.json file which will have all the node packages you depend on.\n2. Next, run the following command\u0026nbsp;\n# install packages npm install gulp gulp-typescript gulp-tslint gulp-tslint-stylish gulp-sourcemaps gulp-inject gulp-rimraf --save-dev This will install all the packages you need and save them as development dependency in package.json file.\nNow we\u0026nbsp;are ready to create our\u0026nbsp;gulpfile.\nGulpfile.js We will assume the following folder structure for our gulp tasks\nwwwroot/app - this is will have all our TypeScript\u0026nbsp;files. This folder may have subfolders as well\nwwwroot/js/app - this is where we will place all the compiled JavaScript files\nwwwroot/js/lib - this is where we will place all thrid party libraries like AngularJS, jQuery, etc...\nNext, import all the packages we installed into gulpfile.js\n// Package imports var gulp = require(\u0026#39;gulp\u0026#39;); var typescript = require(\u0026#39;gulp-typescript\u0026#39;); var tslint = require(\u0026#39;gulp-tslint\u0026#39;); var tslintStyle = require(\u0026#39;gulp-tslint-stylish\u0026#39;); var sourcemaps = require(\u0026#39;gulp-sourcemaps\u0026#39;); var inject = require(\u0026#39;gulp-inject\u0026#39;); var rimraf = require(\u0026#39;gulp-rimraf\u0026#39;);  Lets create our\u0026nbsp;tasks now\n1. Clean We need a task to clean wwwroot/js/app to clean up old compiled JavaScript files\n// clean gulp.task(\u0026#39;clean\u0026#39;, function () { gulp.src(\u0026#39;wwwroot/js/app\u0026#39;, { read: false }) .pipe(rimraf()) });  This task takes a source location and deletes everything in it.\n2.\u0026nbsp;TSLint Just like JSLint, we have TSLint\u0026nbsp;to report mistakes in our TypeScript. The TSLint needs tslint.json file with the lint configuration, you can find a sample one here\u0026nbsp;but you can add/remove any rules. Instead of having the rules in a json file, I created JavaScript based config file\u0026nbsp;tslintConfig.js\u0026nbsp;and kept all the rules in it.\nThe task created for TSLint looks like this\n// TS Lint var tsLintConfig = require(\u0026#39;./tslintConfig\u0026#39;); gulp.task(\u0026#39;ts-lint\u0026#39;, function () { gulp.src(\u0026#39;wwwroot/**/*.ts\u0026#39;) .pipe(tslint(tsLintConfig)) .pipe(tslint.report(tslintStyle, { emitError: false, sort: true, bell: true })); });  This task also uses\u0026nbsp;gulp-tslint-stylish\u0026nbsp;plugin to produce nicely formatted errors.\n3. TS Compile This task compiles TypeScripts\u0026nbsp;and produces JavaScript with sourcemaps\n// TS Compile gulp.task(\u0026#39;ts-compile\u0026#39;, [\u0026#39;ts-lint\u0026#39;, \u0026#39;clean\u0026#39;], function () { var tsResult = gulp.src(\u0026#39;wwwroot/**/*.ts\u0026#39;) .pipe(sourcemaps.init()) .pipe(typescript()); tsResult.js .pipe(sourcemaps.write(\u0026#39;.\u0026#39;)) .pipe(gulp.dest(\u0026#39;wwwroot/js\u0026#39;)); });  This task runs 'ts-lint' and 'clean' before running compile task. The compiled files are placed in wwwroot/js/app folder.\n4. Inject This task is to inject compiled JavaScript files into our main HTML file\n// Inject  gulp.task(\u0026#39;inject\u0026#39;, [\u0026#39;ts-compile\u0026#39;], function () { var target = gulp.src(\u0026#39;wwwroot/index.html\u0026#39;); var sources = gulp.src([\u0026#39;wwwroot/js/app/**/*.js\u0026#39;], { read: false }); target.pipe(inject(sources, { relative: true })) .pipe(gulp.dest(\u0026#39;wwwroot\u0026#39;)); });  The main html file in wwwroot has the following HTML comment to indicate where the scripts should be injected,\n\u0026lt;!--injection comment--\u0026gt; \u0026lt;!--inject:js--\u0026gt; \u0026lt;!--endinject--\u0026gt; This task generates script tag for\u0026nbsp;all the generated JavaScript files in our wwwroot/js/app and places them between start and end comment tags.\n5. Watch Next, we create watch task to run TSLint, Clean, TS Compile and Inject whenever any change in detected in wwwroot/app with *.ts extension\n// Watch gulp.task(\u0026#39;ts-watch\u0026#39;, function () { gulp.watch(\u0026#39;wwwroot/**/*.ts\u0026#39;, [\u0026#39;inject\u0026#39;]); });  Due to dependent task setups, when we run 'inject' it will trigger 'ts-lint', 'clean' and 'ts-compile' for us.\n6. Default task Finally, we will make 'inject' as default task. This allows us to run\u0026nbsp;inject task when we ask gulp to run the default task\n// Default task gulp.task(\u0026#39;default\u0026#39;, [\u0026#39;inject\u0026#39;]);  That's it. We are now ready to use TypeScript as our client side development language in ASP.NET 5 \u0026nbsp;MVC 6.\nI have not created tasks to minify and concatenate compiled JavaScript files. You can add them easily using gulp-uglify\u0026nbsp;and\u0026nbsp;gulp-concat.\n\u0026nbsp;\nUpdate: sourcemaps was not resolving source files correctly for me. It started working after specifying sourceRoot in sourcemaps.write() method as follows\u0026nbsp;\n// ts-compile updated gulp.task(\u0026#39;ts-compile\u0026#39;, [\u0026#39;ts-lint\u0026#39;, \u0026#39;clean\u0026#39;], function () { var tsResult = gulp.src(\u0026#39;wwwroot/**/*.ts\u0026#39;) .pipe(sourcemaps.init()) .pipe(typescript()); tsResult.js .pipe(sourcemaps.write(\u0026#34;.\u0026#34;, { sourceRoot: \u0026#39;wwwroot/app\u0026#39; })) .pipe(gulp.dest(\u0026#39;wwwroot/js\u0026#39;)); }); "
},
{
	"uri": "https://kodebot.com/blog/2015/mvc-6-camel-case-json/",
	"title": "MVC 6 Camel Case JSON",
	"tags": ["ASP.NET", "MVC"],
	"description": "",
	"content": "I am excited with all the new features that are coming with MVC 6. One of the main differences between MVC 6 and previous versions is that it doesn't have two different libraries and controllers for MVC and Web API.\u0026nbsp;\nThe previous versions of Asp.Net MVC uses JavaScriptSerializer\u0026nbsp;for MVC controllers and JSON.NET\u0026nbsp;for Web API controllers.\nThis means, if you have an application which uses both MVC controllers and Web API controllers then you need to apply any custom JSON serialization configurations twice or you\u0026nbsp;should\u0026nbsp;replace JavaScriptSerializer with JSON.NET.\nAsp.Net MVC 6 uses JSON.NET\u0026nbsp;by default for JSON serialization and because it doesn't use two different controller base classes for MVC and Web API, we apply any custom JSON\u0026nbsp;settings once that will be used by MVC and Web API.\nWe can apply these settings in ConfigureServices method when adding MVC service in the\u0026nbsp;Startup class.\nHere is an example how we can change JSON output formatter to use camel case\n// Sample  public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddMvc() .Configure\u0026lt;MvcOptions\u0026gt;(options =\u0026gt; { var jsonOutputFormatter = new JsonOutputFormatter(); jsonOutputFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); options.OutputFormatters.Insert(0, jsonOutputFormatter); }); } public void Configure(IApplicationBuilder app) { app.UseMvc(); } } In this example, I simply created JsonOutputFormatter with custom settings and added it as a first item in the output formatters list.\nYou can also achieve the same result\u0026nbsp;by any of the following approaches\n replace all\u0026nbsp;existing JSON formatter with new custom formatter update existing JSON formatter with custom settings  \u0026nbsp;I am just using the easiest approach in this case.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/tpl-task-and-windows-identity-impersonation-the-beauty-of-closure/",
	"title": "TPL Task and Windows Identity Impersonation - The beauty of Closure",
	"tags": ["C#"],
	"description": "",
	"content": "I have created a web application with Windows Authentication and impersonation is enabled as I need the application connect to SQL Server database using Windows Authentication.\nI wanted\u0026nbsp;to run a TPL task in the impersonated context, so, I added the following code naively in a\u0026nbsp;action method of one of my controllers\n// naive task code  Task.Run(() =\u0026gt; { // Task code here }); Though, this answer\u0026nbsp;suggests that tasks will run under the same context under which it was created, it wasn't working that way in my case.\nThe task is created under impersonated context but the task was invoked under the identity configured in application pool which is network service in this case.\u0026nbsp;\nTo make this work, I need to invoke the method in the task under impersonated context. The easiest way is to capture the WindowsIdentity and make it available to the task function so it can execute any code under the impersonated\u0026nbsp;context.\nThe Closure feature helped me to achieve this elegantly. \u0026nbsp;This means, lambda expressions or lambda functions can access any variables declared in the block where the lambda expressions or lambda functions\u0026nbsp;are defined. So, I created a local variable in my action method and used in the task function to run code under the impersonated context. Here is the sample code\n// Task using closure var currentWindowsIdentity = WindowsIdentity.GetCurrent(); Task.Run(() =\u0026gt; { using (currentWindowsIdentity.Impersonate()) { // Task code here  } }); "
},
{
	"uri": "https://kodebot.com/blog/2015/selenium-and-page-objects/",
	"title": "Selenium and Page Objects",
	"tags": ["C#", "e2e-testing"],
	"description": "",
	"content": "I use\u0026nbsp;Selenium\u0026nbsp;or Protractor\u0026nbsp;for E2E tests that require browser automation. I prefer to use Selenium when I want to write my tests in C# and Protractor for AngularJS applications.\nIt doesn't matter what tool/framework you use, if you want to bring in structure and make your test code reusable when dealing with any UI automation then Page Object is your friend.\nI have been creating my Page Objects incorrectly with two major flaws until I read this\u0026nbsp;great article from Martin Fowler. The flaws in my Page Objects were\n Only one Page Object Type per page or screen Expose tool specific objects  When only one page object is created for the entire page or screen that you are trying to automate then, the\u0026nbsp;object will have too many things to do and if the the page or screen has shared sections then all your page objects will have duplicate code.\nLikewise, if the\u0026nbsp;page object exposes any objects from underlying tools/frameworks then you will create hard dependencies between you test code and test tools/framework which will create challenges when you want to replace your tool/framework with other or when you want to upgrade from one version to another.\u0026nbsp;\nHere is the sample Page Objects I created to search and get the results from\u0026nbsp;Bing using Selenium\n// Search Page \tpublic class BingSearch { private IWebElement _searchTerm; private List\u0026lt;BingSearchResult\u0026gt; _searchResults; public BingSearch() { Browser.GoTo(\u0026#34;http://www.bing.com\u0026#34;); } public string SearchTerm { get { return _searchTerm.Text; } set { _searchTerm = _searchTerm ?? Browser.WebDriver.FindElement(By.Name(\u0026#34;q\u0026#34;)); _searchTerm.SendKeys(value); } } public void Search() { if (_searchTerm != null) { if (_searchResults != null) { _searchResults.Clear(); } _searchTerm.Submit(); } } public List\u0026lt;BingSearchResult\u0026gt; SearchResults { get { _searchResults = _searchResults ?? new List\u0026lt;BingSearchResult\u0026gt;(); if (!_searchResults.Any()) { var elements = Browser.WebDriver.FindElements(By.CssSelector(\u0026#34;.b_algo a\u0026#34;)); foreach (var element in elements) { _searchResults.Add(new BingSearchResult() { DisplayText = element.Text, Link = element.GetAttribute(\u0026#34;href\u0026#34;) }); } } return _searchResults; } } }// Search Result  public class BingSearchResult { public string DisplayText { get; set; } public string Link { get; set; } }// Browser abstraction \tpublic static class Browser { private static IWebDriver _driver; static Browser() { _driver = new FirefoxDriver(); _driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(10)); } public static void GoTo(string url) { _driver.Navigate().GoToUrl(url); } public static IWebDriver WebDriver { get { return _driver; } } public static void Close() { _driver.Close(); } } If you look at the BingSearch class it doesn\u0026rsquo;t expose any Selenium objects but it has a list for SearchResults which uses BingSearchResult as its generic type. The BingSearchResult represents only one result in the page. Because I don\u0026rsquo;t want to page through the search result I didn\u0026rsquo;t bother creating any type to support it.\nBrowser is represented using static class in this sample but it doesn\u0026rsquo;t have to be static class.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/ecmascript-6-sublime-text-editor-build-system/",
	"title": "ECMAScript 6 - Sublime Text editor build system",
	"tags": ["JavaScript", "tools"],
	"description": "",
	"content": "The specification for ECMAScript 6 (aka ES6, ECMAScript harmony) is expected to be released in June 2015 and many tools, frameworks and browsers have started implementing the features of ES6. For example, Angular 2.0\u0026nbsp;and Aurelia\u0026nbsp;allows us to write code in ES6 now. There are transpilers as well out there, which allows us to write code in ES6 and transpile them into ES5. I have come across two major transpilers\u0026nbsp;traceur\u0026nbsp;and\u0026nbsp;babel, they are equally good.\nI wanted to setup something like LinqPad\u0026nbsp;for JavaScript to learn and practice ES6 without using browser to see the output.\nThe tools I used to achieve the desired setup are\n Sublime text\u0026nbsp;- primary editor Nodejs\u0026nbsp;- runs ES5 Babel\u0026nbsp;- ES6 to ES5 transpiler Gulp\u0026nbsp;with gulp-babel\u0026nbsp;and gulp-shell\u0026nbsp;plugins - task runner  I took advantage of Sublime text build system by creating a new one for ES6 using gulp task. The gulp task will transpile the code from ES6 to ES5 and run it as a normal node program.\nLet's start from the gulp task, here is the task I have created\n// gulpfile.js var gulp = require(\u0026#39;gulp\u0026#39;); var babel = require(\u0026#39;gulp-babel\u0026#39;); var shell = require(\u0026#39;gulp-shell\u0026#39;); gulp.task(\u0026#39;run\u0026#39;, function(){ return gulp.src(\u0026#39;app.js\u0026#39;) .pipe(babel()) .pipe(gulp.dest(\u0026#39;result\u0026#39;)) .pipe(shell([\u0026#39;node result\\\\app.js\u0026#39;])); });  This task simple takes the source file named app.js and applies babel task to convert from ES6 to ES5, stores the output in result folder and finally runs the output file as a normal node program using grunt's shell plugin.\nHere is the build system I created for ES6\n{ \u0026#34;cmd\u0026#34;: [\u0026#34;gulp.cmd\u0026#34;, \u0026#34;run\u0026#34;] }  Note: If you are using Windows 8, you must use gulp.cmd rather than gulp.\nThe build script simply invokes gulp to run a task named run.\nI have also installed this\u0026nbsp;package to enable ES6 syntax highlight feature in Sublime text.\nMy file structure looks like this in the end\n   The code looks like this with syntax highlight feature\n   Finally, output looks like this when I use Ctrl+B to run the build\n   This setup is only recommended if you just want to play with ES6 like me. The grunt task uses hard coded files names and you need to use the same file name to get it working.\n "
},
{
	"uri": "https://kodebot.com/blog/2015/six-stars-of-angularjs-part-3/",
	"title": "Six stars of AngularJS - Part 3",
	"tags": ["JavaScript", "AngularJS"],
	"description": "",
	"content": "In part 1\u0026nbsp;and 2\u0026nbsp;of this series, we have seen five different ways to create a service in angular.\nThe last one we are going to look at in this series is 'decorate' function of $provide service.\nDecorator The decorate function is NOT used to create a service, instead, this is used to decorate or replace an existing service. Let's look at this function with an example\n// sample 1 app.factory(\u0026#39;movieService\u0026#39;, movieService); function movieService() { return { getAllMovies: getAllMovies } function getAllMovies() { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } }  In this example, we have movieService which exposes a function to get all the movies. Now, Let's create a decorator for this service to change the behavior of getAllMovies to return only the first 2 items.\nThe following is a decorator created for movieService\n// sample 2  app.config(function($provide) { $provide.decorator(\u0026#39;movieService\u0026#39;, movieServiceDecorator); function movieServiceDecorator($delegate) { var originalGetAllMovies = $delegate.getAllMovies; $delegate.getAllMovies = function() { var result = originalGetAllMovies(); return result.slice(0,2); } return $delegate; } });  Note: decorate function is not available to invoke from module.\nThe first parameter of the decorate function is the name of the service we want to decorate with and second parameter is the decorator function.\nThe decorator is invoked using $injector so, we can annotate dependencies as we do with any other services. The $delegate is one of the special dependencies we can use with decorator. It provides the original instance of a service so that we can decorate or replace it in whole or parts of it.\nIf you look at the code, all we have done is replaced getAllMovies with a new function and the new function makes use of the original function to get full result and slices it with two results. Finally, we are returning the modified service.\nUnder the hood, when $injector creates an instance of a service, it calls any decorators in the order they were defined and stores the decorated instance in the instance cache.\nWe can use decorator to override any service which is not in our control.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/six-stars-of-angularjs-part-2/",
	"title": "Six stars of AngularJS - Part 2",
	"tags": ["JavaScript", "AngularJS"],
	"description": "",
	"content": "In part 1\u0026nbsp;of this series, we have briefly seen how $provide and $injector work and we also took a deep dive on how we create a service using provider function of $provide service.\nLets continue our journey and look at how and when we can\u0026nbsp;use other\u0026nbsp;functions of $provide service to create services.\nThe following are the four\u0026nbsp;functions we are going to look at now\n factory service value constant  Factory The factory is one of the functions exposed by $provide service to create services. Here is an example of service created using factory function of $provide service\n// sample 1 $provide.factory(\u0026#39;movieService\u0026#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } }  Here is the same service created using factory function\u0026nbsp;available in module.\n// sample 2 var app = angular.module(\u0026#39;app\u0026#39;); app.factory(\u0026#39;movieService\u0026#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } }  Note, module doesn't implement this function, it just allows us to invoke factory function of $provide in a convenient way.\nYou would have recognized by now that the factory function takes the service factory as second parameter, this is same as what we assign to $get member of service provider. Of course, the first parameter is name of the service we are creating.\nWhen we create a service using factory function, $provide\u0026nbsp;wraps it with service provider and registers it with $injector. We cannot create configurable services when factory function is used. So, if you don't want to create configurable service, you can use factory function. This is most used function to create services.\nService\u0026nbsp; The service function is used to create services if the service definition is defined as JavaScript class/type. The function name 'service' is kind of misleading in a way that it will make you think that this 'THE' function to create services.\nWhen we use provider or factory function, the service factory typically uses module or revealing module pattern and returns an object with all the public functions. So, if we need to create an instance of the service, we just need to invoke service factory method. In the context of angular, $injector will invoke service factory method to get service instance.\nWhen we use 'service' method of $provide, we will be defining our service as type/class and $injector will invoke it using new keyword, in other words, the function will be treated as constructor function.\nHere is an example of how we use 'service' function to create services\n// sample 3  app.service(\u0026#39;movieService\u0026#39;, movieService); function movieService() { this.getAllMovies = getAllMovies; function getAllMovies() { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } }  Note: this example uses the method available in module.\nIf you look at the service factory function, the public functions exposed by underlying service is attached to this. So, if we create new instance using new keyword, we can invoke the functions attached to this.\nThis way of creating services is recommended when we need to use class/type as a service.\u0026nbsp;\nValue The value function is the simplest way to create a service if the service doesn't have any dependencies. This function takes service itself as second parameter(not the service provider or service factory) and simply returns\u0026nbsp;it when requested. If we specify function as second parameter then the function is returned when the instance of the service is requested. Note, it will not invoke the function, it will just return it as if it is an object. We can use any value for the second parameter including string, number, object literal, function, etc...\nThe following are some\u0026nbsp;examples of service created using value\n// sample 4  app.value(\u0026#39;movieService\u0026#39;, movieService()); // Note : function is invoked  function movieService() { return { getAllMovies: getAllMovies } function getAllMovies() { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } } // sample 5  app.value(\u0026#39;movieService\u0026#39;, { getAllMovies: getAllMovies}); // sample 6  app.value(\u0026#39;movieService\u0026#39;, \u0026#34;sample service\u0026#34;);  Generally, this function is used to create services when we know that the service doesn't have any dependencies.\nConstant The constant is a special function to create constants. One of the specialty is that constants created this way can be injected into config block of a module but, we know only providers can be injected into config method of a module. How does it work? The works because the constant name is also the name of the provider. The second parameter we specify will be both service provider and service instance. Also, $provide won't suffix 'Provider' at the end of first parameter to create provider name. So, if we specify constant name as dependency in config function of a module, it will be seen as provider and $injector will inject it.\nHere is an example of how constant is created\n// sample 7 app.constant(\u0026#39;PI\u0026#39;, 3.14);  We have seen all five ways to create services in angular. But, wait, did we not say there are six stars in angular? Yes, there are six and the sixth one is decorator function. We will have a look at decorator in the next post.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/six-stars-of-angularjs-part-1/",
	"title": "Six stars of AngularJS - Part 1",
	"tags": ["JavaScript", "AngularJS"],
	"description": "",
	"content": "Introduction Services are one of the core buiding blocks of AngularJS. It helps us to create reusable code that can be shared accross the application(s).\nAngularJS gives us five different options to create services. We will look at what are those five options and how and when they can be used. But, before that lets take a brief look at couple of built-in angular services and how they works in the context of dependency injection.\n $injector - This is a special service which creates and injects any injectable dependencies. $provide\u0026nbsp;- This is another special service which tells $injector that a particular service is injectable and\u0026nbsp;shares\u0026nbsp;information to create new instance when required  So, $provide is our gateway to introduce any services into our angular application. This is how it works at a very high level\n We will tell $provide that this is a new service that I would like to use in my application $provide will register it with $injector $injector will create a new instance and inject it when requested  Provider As described in AngularJS API documentation, $provide takes service provider which wraps service factory and service factory wraps the service.\nTo create service provider and register it with $injector, we use provider function of $provide service. Here is an example of simple service provider created using provider function\n// provider sample 1  $provide.provider(\u0026#39;movieService\u0026#39;, movieServiceProvider); // provider  function movieServiceProvider() { var self = this; this.$get = movieService; // factory  this.isFrench = false; function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { if (self.isFrench) { return [\u0026#39;frenchMovie1\u0026#39;, \u0026#39;frenchMovie2\u0026#39;, \u0026#39;frenchMovie3\u0026#39;]; } else { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } } } }  The first parameter is name of the service we want to create (note: this is name of the service, not the name of the service provider, angular will automatically append 'Provider' at the end of the name you specify here and create provider name. So, the provider name created for movieService will be\u0026nbsp;movieServiceProvider) and the second parameter is service provider itself.\nThe service provider function must have $get member which should be or hold reference to service factory. The service provider\u0026nbsp;can have any number of other member. We will generally create additional members to configure the service before creating them.\nIn the example above, we have movieService function which is assigned to $get member. The movieService is a service factory and when invoked, it returns an object with all the functions we expose from the movieService. When injector needs to create an instance of the service, it will simply invoke $get.\nThe movieServiceProvider also has a member isFrench. This can be used to configure how service is created or how it behaves. In this case, the behaviour of the service is modified to return french movies or english movies.\u0026nbsp;\nThe configuration of providers can only be done during configuration phase of a module where the provider is defined.\nLet's take a quick detour and understand what we mean by 'configuration phase of a module' to understand providers throughly.\nWhen a module is defined, we can setup zero or more configuration blocks and run blocks. When a module is created by angular, it will execute all the configuration blocks in the order they were defined first and then it will run all the run blocks in the order they were defined.\nThe service provider is configured in the configuration phase by defining it as one of the step in module's config function.\nHere is an example of how movieServiceProvider is configured as part of module's configuration phase\u0026nbsp;\n// provider sample 2  var app = angular.module(\u0026#39;app\u0026#39;, []); app.config(function($provide) { // creates and register\u0026#39;s provider  var movieServiceProviderInstance = $provide.provider(\u0026#39;movieService\u0026#39;, movieServiceProvider); // configures provider  movieServiceProviderInstance.isFrench = true; function movieServiceProvider() { var self = this; this.$get = movieService; this.isFrench = false; function movieService() { return { getAllMovies: getAllMovies }; function getAllMovies() { if (self.isFrench) { return [\u0026#39;frenchMovie1\u0026#39;, \u0026#39;frenchMovie2\u0026#39;, \u0026#39;frenchMovie3\u0026#39;]; } else { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } } } } });  Usually, if you want to do anything\u0026nbsp;when the module is create, you will keep them in module's run function.\u0026nbsp;\nOne of the important thing to note here is, the $provide service can be injected only into the config function of a module and the same is true for providers as well.\nThis means, services or in this case service providers can be created only in the config phase of a module and the code to create them should be kept inside the config method. It is not really convenient mainly when we want to keep the services in their own files. Angular rescues us from this situation by exposing the methods we use to create services as a member of module as well.\nSo, you can use provider function of $provide from an instance of a module. For example, the following is same as the first sample\n// Sample 3  var app = angular.module(\u0026#39;app\u0026#39;); app.provider(\u0026#39;movieService\u0026#39;, movieServiceProvider); function movieServiceProvider() { var self = this; this.$get = movieService; this.isFrench = false; function movieService() { return { getAllMovies: getAllMovies }; function getAllMovies() { if (self.isFrench) { return [\u0026#39;frenchMovie1\u0026#39;, \u0026#39;frenchMovie2\u0026#39;, \u0026#39;frenchMovie3\u0026#39;]; } else { return [\u0026#39;engMovie1\u0026#39;, \u0026#39;engMovie2\u0026#39;, \u0026#39;engMovie3\u0026#39;]; } } } }  When to use? As you would have understood by now, providers are the lowest level function available to create services. It gives you options to configure the services during its creation. It is recommended to use this function only when you need to create configurable services. You are better off with other functions\u0026nbsp;available to create services if you don\u0026rsquo;t want them to be configurable.\nWe will look at other options to create services in part 2\u0026nbsp;of this post.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/nsequencecomparer-to-compare-two-sequences/",
	"title": "NSequenceComparer to compare two sequences",
	"tags": ["Nuget", "C#"],
	"description": "",
	"content": "I had a requirement\u0026nbsp;to compare two sequences to find the differences in .NET platform. To compare large sequences, I needed an algorithm that\u0026nbsp;does not use recursion.\u0026nbsp;I could not find anything in the internet that I can use out of the box, so, I created\u0026nbsp;this nuget package\nThis package is very simple to use, you can read usage instructions\u0026nbsp;here\nFeel free to use and contribute.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/mocking-function-that-returns-promise/",
	"title": "Mocking function that returns promise",
	"tags": ["Unit Testing", "JavaScript", "AngularJS"],
	"description": "",
	"content": "Promises are very useful to develope non-blocking web applications and it also helps to avoid pyramid of doom.\nAngularJS supports\u0026nbsp;Q\u0026nbsp;based promises, this means, we can create functions in AngularJS application that uses promises. When it comes to unit testing functions that returns promises, it is just like unit testing normal functions only if you remember\u0026nbsp;simulate scope's life cycle using $apply() or $digest()\nLet's see this with an example. The following controller loads restaurants using promise\n// homeController (function () { \u0026#39;use strict\u0026#39;; angular .module(\u0026#39;app\u0026#39;) .controller(\u0026#39;homeController\u0026#39;, [\u0026#39;restaurantService\u0026#39;, homeController]); function homeController(restaurantService) { // #region viewmodel  var vm = this; vm.restaurants = []; // #endregion  // #region activate  activate(); function activate() { getRestaurants(); } // #endregion  // #region internal methods  function getRestaurants() { restaurantService.getRestaurants() .then(function (data) { vm.restaurants = data; }) .catch(function (error) { // error  }); } // #endregion  } })();  The unit testing for this method would look like this\n// unit test describe(\u0026#39;home page\u0026#39;, function () { var $controller; var $q; var restaurantService; beforeEach(function () { // load module  module(\u0026#39;app\u0026#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.value(\u0026#39;service\u0026#39;, \u0026#39;override\u0026#39;);  }); // initialise  inject(function (_$controller_, _$q_, _restaurantService_) { $controller = _$controller_; $q = _$q_; restaurantService = _restaurantService_; }); }); describe(\u0026#39;when home controller is initiated\u0026#39;, function () { it(\u0026#39;should load restaurants\u0026#39;, function () { restaurantService.getRestaurants = function() { return $q.when([\u0026#39;rest1\u0026#39;, \u0026#39;rest2\u0026#39;]); } var target = $controller(\u0026#39;homeController\u0026#39;, { restaurantService: restaurantService }); expect(target.restaurants).toEqual([\u0026#39;rest1\u0026#39;, \u0026#39;rest2\u0026#39;]); }); }); });  When you run this unit test, it returns error stating that [] is not equal to ['rest1', 'rest2']. This is because callback functions are processed as part of $evalAsync in $digest loop. Unit tests are not in Angular's execution context to run $digest loop automatically so it needs some help to process the callbacks. All we need to do to make it work is to invoke $digest method on controller's scope or any of its parent.\nHere is the updated example,\n// unit test describe(\u0026#39;home page\u0026#39;, function () { var $controller; var $q; var $rootScope; var restaurantService; beforeEach(function () { // load module  module(\u0026#39;app\u0026#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.value(\u0026#39;service\u0026#39;, \u0026#39;override\u0026#39;);  }); // initialise  inject(function (_$controller_, _$q_, _$rootScope_, _restaurantService_) { $controller = _$controller_; $q = _$q_; $rootScope = _$rootScope_; restaurantService = _restaurantService_; }); }); describe(\u0026#39;when home controller is initiated\u0026#39;, function () { it(\u0026#39;should load restaurants\u0026#39;, function () { restaurantService.getRestaurants = function() { return $q.when([\u0026#39;rest1\u0026#39;, \u0026#39;rest2\u0026#39;]); } var target = $controller(\u0026#39;homeController\u0026#39;, { restaurantService: restaurantService }); $rootScope.$digest(); expect(target.restaurants).toEqual([\u0026#39;rest1\u0026#39;, \u0026#39;rest2\u0026#39;]); }); }); });  You can find more information on how $digest loop works\u0026nbsp;here.\n"
},
{
	"uri": "https://kodebot.com/blog/2015/structuring-unit-tests/",
	"title": "Strucuring unit tests",
	"tags": ["Unit Testing", "C#"],
	"description": "",
	"content": "I have been following the same unit test structure that Phil Haack described here. \u0026nbsp;But, I use slightly different version when my tests need too many repeated test setups and cleanups.\u0026nbsp;\nI like jasmine\u0026nbsp;mainly because it allows to keep the tests DRY\u0026nbsp;using nested structure. Ofcourse it is possible in jasmine because method nesting is allowed in JavaScript. I like to structure my C# test files the same way using nested classes\u0026nbsp;without using any additional libraries\nFor example, consider the following System Under Test class\npublic class AddressValidator { public bool IsValid(IList\u0026lt;string\u0026gt; addressLines) { if (addressLines == null) { throw new ArgumentNullException(\u0026#34;addressLines\u0026#34;, \u0026#34;AddressLines cannot be null\u0026#34;); } if (addressLines.ElementAtOrDefault(0) != null \u0026amp;\u0026amp; addressLines.ElementAtOrDefault(4) != null) { return true; } if (addressLines.ElementAtOrDefault(0) != null \u0026amp;\u0026amp; addressLines.ElementAtOrDefault(1) != null \u0026amp;\u0026amp; addressLines.ElementAtOrDefault(2) != null) { return true; } return false; } public bool IsNonUkAddress(IEnumerable\u0026lt;string\u0026gt; addressLines) { // return true for UK address  return false; } } The test class for this System Under Test looks like this\n[TestClass] public class AddressVaidatorTests { private AddressValidator _target;[TestInitialize] public virtual void TestSetup() { _target = new AddressValidator(); // other test setups that are common for all the tests in this file.  }[TestClass] public class TheIsValidMethod : AddressVaidatorTests {[TestInitialize] public override void TestSetup() { base.TestSetup(); // additional test setups applicable for the current method under test  }[TestClass] public class WhenTheAddressIsNull : TheIsValidMethod { // add test initialiser here to setup anything that are  // applicable for the current scenario [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void ShouldThrowArgumentNullException() { // arrange  List\u0026lt;string\u0026gt; inputAddress = null; // act  _target.IsValid(inputAddress); // assert  // expected exception - ArgumentNullException.  } // add test cleanups here  }[TestClass] public class WhenAddressLine1AndPostcodeArePresent : TheIsValidMethod { // add test initialiser here to setup anything that are  // applicable for the current scenario [TestMethod] public void ShouldReturnTrue() { // arrange  var inputAddress = new List\u0026lt;string\u0026gt;() { \u0026#34;Address1\u0026#34;, null, null, null, \u0026#34;Postcode\u0026#34; }; // act  var actual = _target.IsValid(inputAddress); // assert  Assert.IsTrue(actual); } // add test cleanups here  } // add test cleanups here  }[TestClass] public class TheIsUkAddressMethod : AddressValidator { // tests  }[TestCleanup] public virtual void TestCleanup() { // any cleanups  } } So, the first improvement is creating nested test classes for each scenario. This allows us\u0026nbsp;to create test inputs applicable for the current scenario only once regarless of the number of tests defined in the scenario.\u0026nbsp;\nNext one is keeping TestSetup() and TestCleanup() virtual so that we can add additional setups/cleanups by chaining method calls using base keyword. This also allows us to completly replace the setup/cleanup if it is required for any special cases by overriding the methods without chaining.\u0026nbsp;\nOne of the additional benefit of this structuring is that when you group tests by class in the Test Explorer, the tests are nicely arranged\u0026nbsp;like this\n   \u0026nbsp;\n"
},
{
	"uri": "https://kodebot.com/blog/2015/decorator-over-inheritance-hierarchy/",
	"title": "Decorator over Inheritance hierarchy",
	"tags": ["Design Pattern", "C#"],
	"description": "",
	"content": "I have used inheritance to solve a problem in many situations - some of them are correct and some of them are not when thinking about it now.\n When you are in a situation where you think you need multi-level inheritance, 9 out of 10 times you can solve the same problem using decorators.\n One of the problems I have seen recently which fits in this pattern is the implementation of ICommand interface. See the implementation below\npublic class Command : ICommand { public bool CanExecute(object parameter) { // normal can execute version  return true; } public event EventHandler CanExecuteChanged; public void Execute(object parameter) { // normal execute version  } } public class AuditedCommand:Command { public bool CanExecute(object parameter) { // audited can execute version  return base.CanExecute(parameter); } public void Execute(object parameter) { // audited execute version  base.Execute(parameter); } } public class SecureCommand : Command { public bool CanExecute(object parameter) { // Secure can execute version  return base.CanExecute(parameter); } public void Execute(object parameter) { // Secure execute version  base.Execute(parameter); } }  In this example, Command class is implementing ICommand interface and it provides basic version of the Command. Two other classes AuditedCommand and SecureCommand are inherited from Command to add some additional behaviours.\nWhat do we do if we need a Command which supports Auditing and Security? There are two ways we can solve this problem using inheritance\u0026nbsp;\n Use multi-level inheritance where SecureCommand inherits from AuditedCommand and AuditedCommand from Command Create a new class SecureAuditedCommand which inherits from \u0026nbsp;Command   If we use the first approach we loose the flexibility to use just SecureCommand without going through AuditedCommand. Approach 2 is not really sustainable because we cannot create new classes for every combination of new command behaviours we might need in the future.\n  Another problem with approach 2 is it violates SRP.\n  So, what is the better way to solve this problem and keep our code maintainable.\n  The one word answer is \"Decorator\".\n  Here is how it looks like with Decorator pattern\npublic class Command : ICommand { public bool CanExecute(object parameter) { // normal can execute  return true; } public event EventHandler CanExecuteChanged; public void Execute(object parameter) { // normal execute  } } public abstract class CommandDecorator : ICommand { private ICommand _command; public CommandDecorator(ICommand command) { this._command = command; } public virtual bool CanExecute(object parameter) { return _command.CanExecute(parameter); } // should be a wrapper to the property in the base class  public event EventHandler CanExecuteChanged; public virtual void Execute(object parameter) { _command.Execute(parameter); } } public class AuditedCommand:CommandDecorator { public AuditedCommand(ICommand command):base(command) { } public override bool CanExecute(object parameter) { // Audit behaviour goes here  return base.CanExecute(parameter); } public override void Execute(object parameter) { // Audit behaviour goes here  base.Execute(parameter); } } public class SecureCommand : CommandDecorator { public SecureCommand(ICommand command):base(command) { } public override bool CanExecute(object parameter) { // Secure behaviour goes here  return base.CanExecute(parameter); } public override void Execute(object parameter) { // Secure behaviour goes here  base.Execute(parameter); } } // Here is how you compose your commands  ICommand auditedDecorator = new AuditedCommand(command); ICommand secureDecorator = new SecureCommand(command); ICommand auditedSecureDecorator = new SecureCommand(auditedDecorator); Now, we can compose any type of command without compromising maintainability.\n \n"
},
{
	"uri": "https://kodebot.com/blog/2015/organize-angularjs-tests-within-a-spec/",
	"title": "Organize AngularJS Tests within a test file",
	"tags": ["Unit Testing", "JavaScript", "AngularJS"],
	"description": "",
	"content": "I like to have one test file\u0026nbsp;per components of AngularJS application. So, for example, homeController will have its own test file\u0026nbsp;named homeSpec or homeControllerSpec.\nFirst, create a\u0026nbsp;suite to describe a component at a high level and for each scenario create\u0026nbsp;nested suits. This allows us\u0026nbsp;to define any test setup that are common for all the tests\u0026nbsp;in one place.\nFor example, loading module, overriding and injecting any dependencies are done in the beforeEach method of outter test suite. The setup is applicable for all the tests defined in the outter and nested test suits, so, if you don't want any setup for all the tests then do not include them here.\nvar $controller; var calculatorService; beforeEach(function () { // load module  module(\u0026#39;app\u0026#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.value(\u0026#39;service\u0026#39;, \u0026#39;override\u0026#39;);  }); // initialise  inject(function(_$controller_, _calculatorService_) { $controller = _$controller_; calculatorService = _calculatorService_; }); });  Next, add tests directly in the outter suite if they don't fall under any scenario. For example, test to\u0026nbsp;verify whether the controller is created successfully or not is better kept in the outter suit directly\nit(\u0026#39;should initialise the controller successfully\u0026#39;, function() { // act  var result = $controller(\u0026#39;homeController\u0026#39;); // assert  expect(result).toBeDefined(); });  Finally, create test suits for each scenario and keep all the tests applicable for that scenario within the corresponding suite. Again, this allows us to keep all the setup applicable for all the tests within the suite in one place.\ndescribe(\u0026#39;when add is performed\u0026#39;, function() { it(\u0026#39;should invoke add in calculatorService\u0026#39;, function() { // arrange  // replace original method with spy  calculatorService.add = jasmine.createSpy(\u0026#39;add\u0026#39;); var target = $controller(\u0026#39;homeController\u0026#39;, { calculatorService: calculatorService }); // act  target.add(1, 2); // assert  expect(calculatorService.add).toHaveBeenCalledWith(1, 2); });  When required, create suits within nested suits to keep your\u0026nbsp;test file\u0026nbsp;DRY.\u0026nbsp;\nYou may change this structure if required but most of the time sticking to this structure keeps your\u0026nbsp;test files consistent.\nLeave all the dependencies to be resolved and loaded without replacing them with mock version unless it is required (some people may have different view on this).\u0026nbsp;\nFor example, if I just want to mock a method call then I will replace the method with jasmine spy rather then creating new mock object.\u0026nbsp;\ncalculatorService.add = jasmine.createSpy(\u0026#39;add\u0026#39;); var target = $controller(\u0026#39;homeController\u0026#39;, { calculatorService: calculatorService });  But, if I need\u0026nbsp;to replace an object with mock version then I create it and configure $provide to provide the mock version when requested\n// overrides for mock injections  module(function ($provide) { $provide.value(\u0026#39;claculatorService\u0026#39;, \u0026#39;mockCalculatorService\u0026#39;); });  \u0026nbsp;\n"
},
{
	"uri": "https://kodebot.com/blog/2015/setup-chutzpah-to-run-javascript-tests-in-visualstudio/",
	"title": "Setup Chutzpah to Run Javascript Tests in VisualStudio",
	"tags": ["Unit Testing", "JavaScript", "Visual Studio"],
	"description": "",
	"content": "First thing first, install Chutzpah Test Runner\u0026nbsp;and Test Adaptor for the Test Explorer.\nNext, setup your projects in Visual Studio. I personally like to keep my test code in a separate project for JavaScript as well so my project and folder structure looks like this:\n   This allows you\u0026nbsp;to restrict testing frameworks and libraries like Jasmine only to\u0026nbsp;the test project. I use JavaScript\u0026nbsp;libraries directly from the main project when it is needed in test projects as well rather then adding them again in the test project (some people have different view on this but it works for me).\nNow, add all the JavaScript files required for your test. This includes 1. testing library/framework files 2. code under test file(s) 3. any additional files required to run code under test When you are done, your homeSpec.js might look like this\n/// \u0026lt;reference path=\u0026#34;../../../myapplication.web/scripts/jquery-1.10.2.min.js\u0026#34; /\u0026gt;  /// \u0026lt;reference path=\u0026#34;../../../myapplication.web/app/app.js\u0026#34; /\u0026gt; /// \u0026lt;reference path=\u0026#34;../../../myapplication.web/app/home/homecontroller.js\u0026#34; /\u0026gt;  describe(\u0026#39;home page\u0026#39;, function() { it(\u0026#39;should return tile as Home\u0026#39;, function() { expect(\u0026#39;home\u0026#39;).toBe(\u0026#39;home\u0026#39;); });  You can use right click on a test in the code window to run tests in the context or you can right click on a file, folder or project in the solution explorer to run all the tests available in the selected file, folder or project using Chutzpah.\nWe have not applied any custom configurations for this example because it works out of the box but you can configure Chutzpah by creating chutzpah.json file. The tests can be run using command line as well.\nYou can find everything you can do with Chutzpah here.\n"
},
{
	"uri": "https://kodebot.com/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": "I am independent software developer based in UK. This is my business website. I use this space to for tutorials, blog posts and as a host for my pet projects.\n"
},
{
	"uri": "https://kodebot.com/tags/angularjs/",
	"title": "Angularjs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/apache-cordova/",
	"title": "Apache Cordova",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/apps/",
	"title": "Apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/asp.net/",
	"title": "Asp.net",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/c#/",
	"title": "C#",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/design-pattern/",
	"title": "Design Pattern",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/e2e-testing/",
	"title": "E2e Testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/entity-framework/",
	"title": "Entity Framework",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/javascript/",
	"title": "Javascript",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/library/",
	"title": "Library",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/mvc/",
	"title": "Mvc",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/nodejs/",
	"title": "Nodejs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/nuget/",
	"title": "Nuget",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/typescript/",
	"title": "Typescript",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/unit-testing/",
	"title": "Unit Testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kodebot.com/tags/visual-studio/",
	"title": "Visual Studio",
	"tags": [],
	"description": "",
	"content": ""
}]