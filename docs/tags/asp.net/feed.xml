<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET on Kodebot</title>
    <link>https://kodebot.com/tags/asp.net/</link>
    <description>Recent content in ASP.NET on Kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Fri, 19 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://kodebot.com/tags/asp.net/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASP.NET MVC 5 - JsonResult with Http Status Code 400</title>
      <link>https://kodebot.com/blog/2015/aspnet-mvc-5-jsonresult-with-http-status-code-400/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/aspnet-mvc-5-jsonresult-with-http-status-code-400/</guid>
      <description>ASP.NET Web API 2 introduced several helper methods like Ok, NotFound, BadRequest, etc… . This allows us to write code which makes its intentions clear.
In recent times, I have been working in semi-single page application which uses ASP.NET MVC 5 and AngularJS. The application is designed in a way that, there is only one view per feature and each view is SPA. So, each ASP.NET MVC controller have only one GET action that returns the view and rest of the communication is using actions that returns JsonResult that can be used by client in AJAX style just like consuming Web API.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC 5 Hosting for Integration / E2E Testing</title>
      <link>https://kodebot.com/blog/2015/aspnet-mvc-5-hosting-for-integration-e2e-testing/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/aspnet-mvc-5-hosting-for-integration-e2e-testing/</guid>
      <description>public static class ApplicationUtilities { private static Process _webHostProcess; private const string WEB_APP_NAME = &amp;#34;BookShop.Web&amp;#34;; private const int WEB_APP_PORT = 12345; public static void StartApplication() { var webHostStartInfo = GetProcessStartInfo(); _webHostProcess = Process.Start(webHostStartInfo); _webHostProcess.TieLifecycleToParentProcess(); } public static void StopApplication() { if (_webHostProcess == null) return; if (!_webHostProcess.HasExited) _webHostProcess.Kill(); _webHostProcess.Dispose(); } public static string ApplicationBaseUrl { get { return string.Format(&amp;#34;http://localhost:{0}&amp;#34;, WEB_APP_PORT); } } public static string GetFullUrl(string relativePath) { return string.Format(&amp;#34;{0}{1}&amp;#34;, ApplicationUtilities.</description>
    </item>
    
    <item>
      <title>ASP.NET 5 - Tag Helpers, the HTML way</title>
      <link>https://kodebot.com/blog/2015/asp-net-5-tag-helpers-the-html-way/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/asp-net-5-tag-helpers-the-html-way/</guid>
      <description>// Old style tag helpers @Html.LabelFor(Model =&amp;gt; Model.Name, &amp;#34;User Name&amp;#34;, new { @class = &amp;#34;control-label&amp;#34; }); // Declarative style &amp;lt;label asp-for=&amp;#34;Name&amp;#34; class=&amp;#34;control-label&amp;#34;&amp;gt;User Name&amp;lt;/label&amp;gt; // add tag helpers @addTagHelper &amp;#34;*, Microsoft.AspNet.Mvc.TagHelpers&amp;#34; // ITagHelper int Order { get; } Task ProcessAsync(TagHelperContext context, TagHelperOutput output); // Custom tag helper example [TargetElement(&amp;#34;div&amp;#34;, Attributes = &amp;#34;panel-title&amp;#34;)] [TargetElement(&amp;#34;div&amp;#34;, Attributes = &amp;#34;panel-style&amp;#34;)] public class PanelTagHelper : TagHelper { [HtmlAttributeName(&amp;#34;panel-title&amp;#34;)] public string Title { get; set; } [HtmlAttributeName(&amp;#34;panel-type&amp;#34;)] public HtmlPanelType PanelType { get; set; } public override void Process(TagHelperContext context, TagHelperOutput output) { //&amp;lt;div class=&amp;#34;panel panel-default&amp;#34;&amp;gt;  // &amp;lt;div class=&amp;#34;panel-heading&amp;#34;&amp;gt;  // &amp;lt;h3 class=&amp;#34;panel-title&amp;#34;&amp;gt;Panel title&amp;lt;/h3&amp;gt;  // &amp;lt;/div&amp;gt;  // &amp;lt;div class=&amp;#34;panel-body&amp;#34;&amp;gt;  // Panel content  // &amp;lt;/div&amp;gt;  //&amp;lt;/div&amp;gt;  // header content  var panelHeadingContent = new TagBuilder(&amp;#34;h3&amp;#34;); panelHeadingContent.</description>
    </item>
    
    <item>
      <title>ASP.NET 5 - Environment specific pipeline configuration</title>
      <link>https://kodebot.com/blog/2015/asp-net-5-environment-specific-pipeline-configuration/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/asp-net-5-environment-specific-pipeline-configuration/</guid>
      <description>// Example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.IsEnvironment(&amp;#34;Production&amp;#34;)) { // read prod config  } else { // read dev config  } } . . . } // Full example  public class Startup { private readonly IHostingEnvironment _env; public Startup(IHostingEnvironment env) { _env = env; } public void ConfigureServices(IServiceCollection services) { if (_env.</description>
    </item>
    
    <item>
      <title>Owin - Katana core middleware patterns</title>
      <link>https://kodebot.com/blog/2015/owin-katana-core-middleware-patterns/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/owin-katana-core-middleware-patterns/</guid>
      <description>// Delegate Pattern Func&amp;lt;AppFunc, AppFunc&amp;gt; where AppFunc is Func&amp;lt;IDictionary&amp;lt;string, object&amp;gt;, Task&amp;gt;&amp;gt;
// Delegate Pattern Implementation public void Configuration(IAppBuilder builder) { builder.Use(new Func&amp;lt;AppFunc, AppFunc&amp;gt;(next =&amp;gt; async env =&amp;gt; { Console.WriteLine(&amp;#34;From Delegate Middleware - Start&amp;#34;); await next(env); Console.WriteLine(&amp;#34;From Delegate Middleware - End&amp;#34;); })); } // Delegate Pattern with additional parameters public void Configuration(IAppBuilder builder) { builder.Use(new Func&amp;lt;AppFunc, string, AppFunc&amp;gt;((next, param) =&amp;gt; async (env) =&amp;gt; { Console.WriteLine(&amp;#34;From Delegate Middleware with param- Start&amp;#34;); Console.WriteLine(&amp;#34;Paramater value : {0}&amp;#34;, param); await next(env); Console.</description>
    </item>
    
    <item>
      <title>TypeScript build automation in ASP.NET 5 (MVC6) using Gulp</title>
      <link>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</guid>
      <description># creates package.json npm init # install packages npm install gulp gulp-typescript gulp-tslint gulp-tslint-stylish gulp-sourcemaps gulp-inject gulp-rimraf --save-dev // Package imports var gulp = require(&amp;#39;gulp&amp;#39;); var typescript = require(&amp;#39;gulp-typescript&amp;#39;); var tslint = require(&amp;#39;gulp-tslint&amp;#39;); var tslintStyle = require(&amp;#39;gulp-tslint-stylish&amp;#39;); var sourcemaps = require(&amp;#39;gulp-sourcemaps&amp;#39;); var inject = require(&amp;#39;gulp-inject&amp;#39;); var rimraf = require(&amp;#39;gulp-rimraf&amp;#39;); // clean gulp.task(&amp;#39;clean&amp;#39;, function () { gulp.src(&amp;#39;wwwroot/js/app&amp;#39;, { read: false }) .pipe(rimraf()) }); // TS Lint var tsLintConfig = require(&amp;#39;./tslintConfig&amp;#39;); gulp.task(&amp;#39;ts-lint&amp;#39;, function () { gulp.</description>
    </item>
    
    <item>
      <title>MVC 6 Camel Case JSON</title>
      <link>https://kodebot.com/blog/2015/mvc-6-camel-case-json/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/mvc-6-camel-case-json/</guid>
      <description>This means, if you have an application which uses both MVC controllers and Web API controllers then you need to apply any custom JSON serialization configurations twice or you should replace JavaScriptSerializer with JSON.NET.
// Sample  public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddMvc() .Configure&amp;lt;MvcOptions&amp;gt;(options =&amp;gt; { var jsonOutputFormatter = new JsonOutputFormatter(); jsonOutputFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); options.OutputFormatters.Insert(0, jsonOutputFormatter); }); } public void Configure(IApplicationBuilder app) { app.UseMvc(); } } </description>
    </item>
    
  </channel>
</rss>
