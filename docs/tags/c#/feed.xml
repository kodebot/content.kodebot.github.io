<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Kodebot</title>
    <link>https://kodebot.com/tags/c#/</link>
    <description>Recent content in C# on Kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Thu, 09 Apr 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://kodebot.com/tags/c#/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TPL Task and Windows Identity Impersonation - The beauty of Closure</title>
      <link>https://kodebot.com/blog/2015/tpl-task-and-windows-identity-impersonation-the-beauty-of-closure/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/tpl-task-and-windows-identity-impersonation-the-beauty-of-closure/</guid>
      <description>// naive task code  Task.Run(() =&amp;gt; { // Task code here }); To make this work, I need to invoke the method in the task under impersonated context. The easiest way is to capture the WindowsIdentity and make it available to the task function so it can execute any code under the impersonatedÂ context.
// Task using closure var currentWindowsIdentity = WindowsIdentity.GetCurrent(); Task.Run(() =&amp;gt; { using (currentWindowsIdentity.Impersonate()) { // Task code here  } }); </description>
    </item>
    
    <item>
      <title>Selenium and Page Objects</title>
      <link>https://kodebot.com/blog/2015/selenium-and-page-objects/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/selenium-and-page-objects/</guid>
      <description>// Search Page 	public class BingSearch { private IWebElement _searchTerm; private List&amp;lt;BingSearchResult&amp;gt; _searchResults; public BingSearch() { Browser.GoTo(&amp;#34;http://www.bing.com&amp;#34;); } public string SearchTerm { get { return _searchTerm.Text; } set { _searchTerm = _searchTerm ?? Browser.WebDriver.FindElement(By.Name(&amp;#34;q&amp;#34;)); _searchTerm.SendKeys(value); } } public void Search() { if (_searchTerm != null) { if (_searchResults != null) { _searchResults.Clear(); } _searchTerm.Submit(); } } public List&amp;lt;BingSearchResult&amp;gt; SearchResults { get { _searchResults = _searchResults ?? new List&amp;lt;BingSearchResult&amp;gt;(); if (!</description>
    </item>
    
    <item>
      <title>NSequenceComparer to compare two sequences</title>
      <link>https://kodebot.com/blog/2015/nsequencecomparer-to-compare-two-sequences/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/nsequencecomparer-to-compare-two-sequences/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Strucuring unit tests</title>
      <link>https://kodebot.com/blog/2015/structuring-unit-tests/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/structuring-unit-tests/</guid>
      <description>public class AddressValidator { public bool IsValid(IList&amp;lt;string&amp;gt; addressLines) { if (addressLines == null) { throw new ArgumentNullException(&amp;#34;addressLines&amp;#34;, &amp;#34;AddressLines cannot be null&amp;#34;); } if (addressLines.ElementAtOrDefault(0) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(4) != null) { return true; } if (addressLines.ElementAtOrDefault(0) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(1) != null &amp;amp;&amp;amp; addressLines.ElementAtOrDefault(2) != null) { return true; } return false; } public bool IsNonUkAddress(IEnumerable&amp;lt;string&amp;gt; addressLines) { // return true for UK address  return false; } } [TestClass] public class AddressVaidatorTests { private AddressValidator _target; [TestInitialize] public virtual void TestSetup() { _target = new AddressValidator(); // other test setups that are common for all the tests in this file.</description>
    </item>
    
    <item>
      <title>Decorator over Inheritance hierarchy</title>
      <link>https://kodebot.com/blog/2015/decorator-over-inheritance-hierarchy/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/decorator-over-inheritance-hierarchy/</guid>
      <description>public class Command : ICommand { public bool CanExecute(object parameter) { // normal can execute version  return true; } public event EventHandler CanExecuteChanged; public void Execute(object parameter) { // normal execute version  } } public class AuditedCommand:Command { public bool CanExecute(object parameter) { // audited can execute version  return base.CanExecute(parameter); } public void Execute(object parameter) { // audited execute version  base.Execute(parameter); } } public class SecureCommand : Command { public bool CanExecute(object parameter) { // Secure can execute version  return base.</description>
    </item>
    
  </channel>
</rss>
