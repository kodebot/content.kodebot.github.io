<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Kodebot</title>
    <link>https://kodebot.com/tags/javascript/</link>
    <description>Recent content in JavaScript on Kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sun, 04 Oct 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://kodebot.com/tags/javascript/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NodeJs: Loops, Closure and Async Invocation</title>
      <link>https://kodebot.com/blog/2015/nodejs-loops/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/nodejs-loops/</guid>
      <description>Closure Closure is something that is very familiar to all C# developers who know lambda expressions/functions but they just may not know that it is called Closure in JavaScript.
Lets look at what is closure in JavaScript without further ado with an example:
function outer(){ var inOuter = &amp;#34;outer&amp;#34;; inner(); function inner(){ console.log(inOuter); // prints &amp;#39;outer&amp;#39; 	} } In this example, the variable inOuter is defined in the function outer but it is used in the function inner.</description>
    </item>
    
    <item>
      <title>Exception Handling in NodeJS</title>
      <link>https://kodebot.com/blog/2015/exception-handling-in-nodejs/</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/exception-handling-in-nodejs/</guid>
      <description>Introduction Exception handling in Node might look completely different for developers coming from C# background like myself. It is mainly because of the way Node works. Node uses single thread based event loop to enable concurrency, this results in higher throughput with relatively low overhead. When it comes to exception handling, having some understanding of the event loop will help you to do the right thing.
Event Loop Node has the following three main components to achieve concurrent, non-blocking execution</description>
    </item>
    
    <item>
      <title>AngularJS 1.x - Validation on File Input type</title>
      <link>https://kodebot.com/blog/2015/angularjs-1x-validation-on-file-input-type/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/angularjs-1x-validation-on-file-input-type/</guid>
      <description>&amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label class=&amp;#34;col-md-2 control-label&amp;#34; for=&amp;#34;photoUrl&amp;#34;&amp;gt;Photo&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;col-md-4&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;input-group&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;btn btn-primary btn-file input-group-addon&amp;#34;&amp;gt; Browse &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;photoUrlSelector&amp;#34; name=&amp;#34;photoUrlSelector&amp;#34; accept=&amp;#34;image/*&amp;#34; &amp;gt; &amp;lt;/span&amp;gt; &amp;lt;input class=&amp;#34;form-control&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;photoUrl&amp;#34; name=&amp;#34;photoUrl&amp;#34; data-ng-disabled=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;span class=&amp;#34;btn btn-primary btn-file input-group-addon&amp;#34;&amp;gt; Browse &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;photoUrlSelector&amp;#34; name=&amp;#34;photoUrlSelector&amp;#34; accept=&amp;#34;image/*&amp;#34;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;btn btn-primary btn-file input-group-addon&amp;quot;&amp;gt;Browse &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;photoUrlSelector&amp;quot; name=&amp;quot;photoUrlSelector&amp;quot; ngf-select ng-model=&amp;quot;vm.author.photoUrl&amp;quot; accept=&amp;quot;image/*&amp;quot; data-ng-click=&amp;quot;addAuthorForm.photoUrl.$touched=true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;input class=&amp;#34;form-control&amp;#34; type=&amp;#34;text&amp;#34; id=&amp;#34;photoUrl&amp;#34; name=&amp;#34;photoUrl&amp;#34; data-ng-model=&amp;#34;vm.author.photoUrl[0].name&amp;#34; data-ng-required=&amp;#34;true&amp;#34; data-ng-disabled=&amp;#34;true&amp;#34;&amp;gt; as you can see, the input field is also decorated with ng-required directive to enforce required field validation.</description>
    </item>
    
    <item>
      <title>Angular 1.x - Unit Testing a function that returns Promise</title>
      <link>https://kodebot.com/blog/2015/angular-1x-unit-testing-a-function-that-returns-promise/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/angular-1x-unit-testing-a-function-that-returns-promise/</guid>
      <description>var app = angular.module(&amp;#34;app&amp;#34;); app.controller(&amp;#34;studentController&amp;#34;, function($q, studentDataService){ var vm = this; vm.students = undefined; activate(); function activate (){ vm.students = getAllStudents(); } function getAllStudents(){ return studentDataService .getAll(); } }); it(&amp;#34;should get students on activation&amp;#34;, function(done){ // Fixture Setup  // Exercise Systcode  var sut = $controller(&amp;#34;studentController&amp;#34;); // Verify Outcome  sut.students.then(function(data){ expect(data).toBeDefined(); done(); }); $rootScope.$apply(); // Fixture Teardown }); </description>
    </item>
    
    <item>
      <title>ECMAScript 6 - Sublime Text editor build system</title>
      <link>https://kodebot.com/blog/2015/ecmascript-6-sublime-text-editor-build-system/</link>
      <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/ecmascript-6-sublime-text-editor-build-system/</guid>
      <description>// gulpfile.js var gulp = require(&amp;#39;gulp&amp;#39;); var babel = require(&amp;#39;gulp-babel&amp;#39;); var shell = require(&amp;#39;gulp-shell&amp;#39;); gulp.task(&amp;#39;run&amp;#39;, function(){ return gulp.src(&amp;#39;app.js&amp;#39;) .pipe(babel()) .pipe(gulp.dest(&amp;#39;result&amp;#39;)) .pipe(shell([&amp;#39;node result\\app.js&amp;#39;])); }); { &amp;#34;cmd&amp;#34;: [&amp;#34;gulp.cmd&amp;#34;, &amp;#34;run&amp;#34;] } This setup is only recommended if you just want to play with ES6 like me. The grunt task uses hard coded files names and you need to use the same file name to get it working.
</description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 3</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-3/</link>
      <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-3/</guid>
      <description>// sample 1 app.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { getAllMovies: getAllMovies } function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 2  app.config(function($provide) { $provide.decorator(&amp;#39;movieService&amp;#39;, movieServiceDecorator); function movieServiceDecorator($delegate) { var originalGetAllMovies = $delegate.getAllMovies; $delegate.getAllMovies = function() { var result = originalGetAllMovies(); return result.slice(0,2); } return $delegate; } }); </description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 2</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-2/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-2/</guid>
      <description>// sample 1 $provide.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 2 var app = angular.module(&amp;#39;app&amp;#39;); app.factory(&amp;#39;movieService&amp;#39;, movieService); function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 3  app.service(&amp;#39;movieService&amp;#39;, movieService); function movieService() { this.getAllMovies = getAllMovies; function getAllMovies() { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } // sample 4  app.</description>
    </item>
    
    <item>
      <title>Six stars of AngularJS - Part 1</title>
      <link>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-1/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/six-stars-of-angularjs-part-1/</guid>
      <description>// provider sample 1  $provide.provider(&amp;#39;movieService&amp;#39;, movieServiceProvider); // provider  function movieServiceProvider() { var self = this; this.$get = movieService; // factory  this.isFrench = false; function movieService() { return { // service  getAllMovies: getAllMovies }; function getAllMovies() { if (self.isFrench) { return [&amp;#39;frenchMovie1&amp;#39;, &amp;#39;frenchMovie2&amp;#39;, &amp;#39;frenchMovie3&amp;#39;]; } else { return [&amp;#39;engMovie1&amp;#39;, &amp;#39;engMovie2&amp;#39;, &amp;#39;engMovie3&amp;#39;]; } } } } // provider sample 2  var app = angular.module(&amp;#39;app&amp;#39;, []); app.config(function($provide) { // creates and register&amp;#39;s provider  var movieServiceProviderInstance = $provide.</description>
    </item>
    
    <item>
      <title>Mocking function that returns promise</title>
      <link>https://kodebot.com/blog/2015/mocking-function-that-returns-promise/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/mocking-function-that-returns-promise/</guid>
      <description>// homeController (function () { &amp;#39;use strict&amp;#39;; angular .module(&amp;#39;app&amp;#39;) .controller(&amp;#39;homeController&amp;#39;, [&amp;#39;restaurantService&amp;#39;, homeController]); function homeController(restaurantService) { // #region viewmodel  var vm = this; vm.restaurants = []; // #endregion  // #region activate  activate(); function activate() { getRestaurants(); } // #endregion  // #region internal methods  function getRestaurants() { restaurantService.getRestaurants() .then(function (data) { vm.restaurants = data; }) .catch(function (error) { // error  }); } // #endregion  } })(); // unit test describe(&amp;#39;home page&amp;#39;, function () { var $controller; var $q; var restaurantService; beforeEach(function () { // load module  module(&amp;#39;app&amp;#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.</description>
    </item>
    
    <item>
      <title>Organize AngularJS Tests within a test file</title>
      <link>https://kodebot.com/blog/2015/organize-angularjs-tests-within-a-spec/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/organize-angularjs-tests-within-a-spec/</guid>
      <description>var $controller; var calculatorService; beforeEach(function () { // load module  module(&amp;#39;app&amp;#39;); // overrides for mock injections  module(function ($provide) { // override any dependency here  // $provide.value(&amp;#39;service&amp;#39;, &amp;#39;override&amp;#39;);  }); // initialise  inject(function(_$controller_, _calculatorService_) { $controller = _$controller_; calculatorService = _calculatorService_; }); }); it(&amp;#39;should initialise the controller successfully&amp;#39;, function() { // act  var result = $controller(&amp;#39;homeController&amp;#39;); // assert  expect(result).toBeDefined(); }); describe(&amp;#39;when add is performed&amp;#39;, function() { it(&amp;#39;should invoke add in calculatorService&amp;#39;, function() { // arrange  // replace original method with spy  calculatorService.</description>
    </item>
    
    <item>
      <title>Setup Chutzpah to Run Javascript Tests in VisualStudio</title>
      <link>https://kodebot.com/blog/2015/setup-chutzpah-to-run-javascript-tests-in-visualstudio/</link>
      <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/setup-chutzpah-to-run-javascript-tests-in-visualstudio/</guid>
      <description> testing library/framework files code under test file(s) any additional files required to run code under test  /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/scripts/jquery-1.10.2.min.js&amp;#34; /&amp;gt;  /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/app/app.js&amp;#34; /&amp;gt; /// &amp;lt;reference path=&amp;#34;../../../myapplication.web/app/home/homecontroller.js&amp;#34; /&amp;gt;  describe(&amp;#39;home page&amp;#39;, function() { it(&amp;#39;should return tile as Home&amp;#39;, function() { expect(&amp;#39;home&amp;#39;).toBe(&amp;#39;home&amp;#39;); }); </description>
    </item>
    
  </channel>
</rss>
