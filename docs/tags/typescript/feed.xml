<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Kodebot</title>
    <link>https://kodebot.com/tags/typescript/</link>
    <description>Recent content in TypeScript on Kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 03 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://kodebot.com/tags/typescript/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript - Accessing object with null key</title>
      <link>https://kodebot.com/blog/2015/typescript-accessing-object-with-null-key/</link>
      <pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-accessing-object-with-null-key/</guid>
      <description>var car = { wheels : 3, colour: &amp;#39;red&amp;#39;, drive: function(){ ... } } routes[null].redirectTo An index expression argument must be of type string, number, symbol, or any.
var nullRef: any = null; routes[nullRef].redirectTo </description>
    </item>
    
    <item>
      <title>TypeScript - &#39;this&#39; reference in AngularJS event handler</title>
      <link>https://kodebot.com/blog/2015/typescript-this-reference-in-angularjs-event-handler/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-this-reference-in-angularjs-event-handler/</guid>
      <description>// Controller using class module App.Home { interface IHomeViewModel { title: string; } class HomeController implements IHomeViewModel { title: string = &amp;#34;Welcome!!!&amp;#34;; static $inject = [&amp;#34;$location&amp;#34;, &amp;#34;$rootScope&amp;#34;] constructor( private $location: ng.ILocationService, private $rootScope: ng.IRootScopeService) { } } angular.module(&amp;#34;app&amp;#34;) .controller(&amp;#34;homeController&amp;#34;, HomeController); } In this example, an interface called IHomeViewModel is created to represent the public members of the controller and a class HomeController is created which implements the interface.Dependencies are injected using static $inject member and injected dependencies are declared as private members.</description>
    </item>
    
    <item>
      <title>TypeScript build automation in ASP.NET 5 (MVC6) using Gulp</title>
      <link>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kodebot.com/blog/2015/typescript-build-automation-in-asp-net-5-mvc6-using-gulp/</guid>
      <description># creates package.json npm init # install packages npm install gulp gulp-typescript gulp-tslint gulp-tslint-stylish gulp-sourcemaps gulp-inject gulp-rimraf --save-dev // Package imports var gulp = require(&amp;#39;gulp&amp;#39;); var typescript = require(&amp;#39;gulp-typescript&amp;#39;); var tslint = require(&amp;#39;gulp-tslint&amp;#39;); var tslintStyle = require(&amp;#39;gulp-tslint-stylish&amp;#39;); var sourcemaps = require(&amp;#39;gulp-sourcemaps&amp;#39;); var inject = require(&amp;#39;gulp-inject&amp;#39;); var rimraf = require(&amp;#39;gulp-rimraf&amp;#39;); // clean gulp.task(&amp;#39;clean&amp;#39;, function () { gulp.src(&amp;#39;wwwroot/js/app&amp;#39;, { read: false }) .pipe(rimraf()) }); // TS Lint var tsLintConfig = require(&amp;#39;./tslintConfig&amp;#39;); gulp.task(&amp;#39;ts-lint&amp;#39;, function () { gulp.</description>
    </item>
    
  </channel>
</rss>
