<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verification techniques on kodebot</title>
    <link>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/</link>
    <description>Recent content in Verification techniques on kodebot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Fri, 22 Feb 2019 10:25:49 +0000</lastBuildDate>
    
	<atom:link href="https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Result verification</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/1-result-verification/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/1-result-verification/</guid>
      <description>We use result verification technique when the test receives the result by running SUT.
Consider an example of testing a function that adds two numbers and returns the result
function add(a, b): return a+b  we verify the correctness of this function by simply checking the result returned by add function
function test_add(): // arrange a = 10 b = 15 // act result = add(a, b) // assert areEqual(25, result) // 25 is expected  </description>
    </item>
    
    <item>
      <title>State verification</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/2-state-verification/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/2-state-verification/</guid>
      <description>State verification is similar to result verification but rather than checking the result of SUT, we check the state of an object or something similar.
Consider an example of testing a function that closes the database connection
module databaseManager isOpen function close(): isOpen = false  When we call this function, it is not going to return anything, instead it is going to change the state of isOpen field
So we need to verify the state of isOpen field to ensure the correctness of close function</description>
    </item>
    
    <item>
      <title>Interaction verification</title>
      <link>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/3-interaction-verification/</link>
      <pubDate>Fri, 22 Feb 2019 10:25:49 +0000</pubDate>
      
      <guid>https://kodebot.com/tutorials/automated-unit-testing-basics/4-verification-techniques/3-interaction-verification/</guid>
      <description>Interaction verification is completely different from result and state verification. With this technique, we will be checking whether an interaction under a specific condition has happened or not.
Consider the example below, the databaseManager module offers a function to close database, but it neither returns any result nor changes the state. All this function does is that it calls a function in database module.
module databaseManager function close(): database.close()  So, the only thing we can do to verify the correctness of this function is to check whether it calls close() function in database module or not</description>
    </item>
    
  </channel>
</rss>